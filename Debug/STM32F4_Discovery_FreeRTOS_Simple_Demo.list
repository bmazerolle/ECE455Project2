
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  6 .bss          0000f494  20000078  20000078  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000f50c  2000f50c  00020078  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fda6  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000276a  00000000  00000000  0002fe4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b58  00000000  00000000  000325b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a10  00000000  00000000  00033110  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006019  00000000  00000000  00033b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004205  00000000  00000000  00039b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003dd3e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002cdc  00000000  00000000  0003ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800519c 	.word	0x0800519c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800519c 	.word	0x0800519c

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	2000f0b4 	.word	0x2000f0b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000094 	.word	0x20000094
 8000530:	20000098 	.word	0x20000098
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fd90 	bl	8002144 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	2000f0b4 	.word	0x2000f0b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fcac 	bl	8001fcc <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000094 	.word	0x20000094
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	20000098 	.word	0x20000098

08000760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800076c:	f001 fb74 	bl	8001e58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <pvPortMalloc+0x178>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000778:	f000 f91c 	bl	80009b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <pvPortMalloc+0x17c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	f040 808c 	bne.w	80008a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000790:	2208      	movs	r2, #8
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	3308      	adds	r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <pvPortMalloc+0x6a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e7fe      	b.n	80007c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d068      	beq.n	80008a2 <pvPortMalloc+0x142>
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <pvPortMalloc+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d863      	bhi.n	80008a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <pvPortMalloc+0x184>)
 80007dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <pvPortMalloc+0x184>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e4:	e004      	b.n	80007f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d203      	bcs.n	8000802 <pvPortMalloc+0xa2>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <pvPortMalloc+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	d04a      	beq.n	80008a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4413      	add	r3, r2
 8000814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	2308      	movs	r3, #8
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d91e      	bls.n	800086c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <pvPortMalloc+0xf4>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e7fe      	b.n	8000852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f906 	bl	8000a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pvPortMalloc+0x180>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <pvPortMalloc+0x180>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pvPortMalloc+0x180>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <pvPortMalloc+0x188>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <pvPortMalloc+0x180>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <pvPortMalloc+0x188>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <pvPortMalloc+0x17c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f001 fae7 	bl	8001e74 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80008ac:	f003 f836 	bl	800391c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <pvPortMalloc+0x16e>
 80008ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7fe      	b.n	80008cc <pvPortMalloc+0x16c>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000f0a4 	.word	0x2000f0a4
 80008dc:	2000f0b0 	.word	0x2000f0b0
 80008e0:	2000f0a8 	.word	0x2000f0a8
 80008e4:	2000f09c 	.word	0x2000f09c
 80008e8:	2000f0ac 	.word	0x2000f0ac

080008ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d046      	beq.n	800098c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <vPortFree+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <vPortFree+0x42>
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e7fe      	b.n	800092c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <vPortFree+0x5e>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <vPortFree+0xa8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d019      	beq.n	800098c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d115      	bne.n	800098c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <vPortFree+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000970:	f001 fa72 	bl	8001e58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <vPortFree+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vPortFree+0xac>)
 8000980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f000 f878 	bl	8000a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000988:	f001 fa74 	bl	8001e74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000f0b0 	.word	0x2000f0b0
 8000998:	2000f0a8 	.word	0x2000f0a8

0800099c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <xPortGetFreeHeapSize+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000f0a8 	.word	0x2000f0a8

080009b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <prvHeapInit+0xac>)
 80009c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00c      	beq.n	80009e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3307      	adds	r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <prvHeapInit+0xac>)
 80009e4:	4413      	add	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <prvHeapInit+0xb0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <prvHeapInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a00:	2208      	movs	r2, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <prvHeapInit+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <prvHeapInit+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <prvHeapInit+0xb4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <prvHeapInit+0xb8>)
 8000a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <prvHeapInit+0xbc>)
 8000a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <prvHeapInit+0xc0>)
 8000a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	2000009c 	.word	0x2000009c
 8000a64:	2000f09c 	.word	0x2000f09c
 8000a68:	2000f0a4 	.word	0x2000f0a4
 8000a6c:	2000f0ac 	.word	0x2000f0ac
 8000a70:	2000f0a8 	.word	0x2000f0a8
 8000a74:	2000f0b0 	.word	0x2000f0b0

08000a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <prvInsertBlockIntoFreeList+0xac>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <prvInsertBlockIntoFreeList+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d108      	bne.n	8000aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d118      	bne.n	8000b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00d      	beq.n	8000af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e008      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e003      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d002      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000f09c 	.word	0x2000f09c
 8000b28:	2000f0a4 	.word	0x2000f0a4

08000b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericReset+0x28>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b54:	f7ff fcf4 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	3b01      	subs	r3, #1
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d114      	bne.n	8000bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fb92 	bl	80022e0 <xTaskRemoveFromEventList>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <xQueueGenericReset+0xcc>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	e009      	b.n	8000be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3324      	adds	r3, #36	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000be8:	f7ff fcd8 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericCreate+0x28>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e004      	b.n	8000c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3350      	adds	r3, #80	; 0x50
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd8e 	bl	8000760 <pvPortMalloc>
 8000c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3350      	adds	r3, #80	; 0x50
 8000c50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f805 	bl	8000c6e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c64:	69bb      	ldr	r3, [r7, #24]
	}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f7ff ff44 	bl	8000b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	78fa      	ldrb	r2, [r7, #3]
 8000ca8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <xQueueGenericSend+0x30>
 8000cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce2:	e7fe      	b.n	8000ce2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d103      	bne.n	8000cf2 <xQueueGenericSend+0x3e>
 8000cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <xQueueGenericSend+0x42>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <xQueueGenericSend+0x44>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <xQueueGenericSend+0x5c>
 8000cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d00:	f383 8811 	msr	BASEPRI, r3
 8000d04:	f3bf 8f6f 	isb	sy
 8000d08:	f3bf 8f4f 	dsb	sy
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d0e:	e7fe      	b.n	8000d0e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d103      	bne.n	8000d1e <xQueueGenericSend+0x6a>
 8000d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d101      	bne.n	8000d22 <xQueueGenericSend+0x6e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <xQueueGenericSend+0x70>
 8000d22:	2300      	movs	r3, #0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <xQueueGenericSend+0x88>
 8000d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d2c:	f383 8811 	msr	BASEPRI, r3
 8000d30:	f3bf 8f6f 	isb	sy
 8000d34:	f3bf 8f4f 	dsb	sy
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	e7fe      	b.n	8000d3a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d3c:	f001 fc9c 	bl	8002678 <xTaskGetSchedulerState>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d102      	bne.n	8000d4c <xQueueGenericSend+0x98>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <xQueueGenericSend+0x9c>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <xQueueGenericSend+0x9e>
 8000d50:	2300      	movs	r3, #0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d109      	bne.n	8000d6a <xQueueGenericSend+0xb6>
 8000d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5a:	f383 8811 	msr	BASEPRI, r3
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	e7fe      	b.n	8000d68 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d6a:	f7ff fbe9 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d302      	bcc.n	8000d80 <xQueueGenericSend+0xcc>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d129      	bne.n	8000dd4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d86:	f000 fa57 	bl	8001238 <prvCopyDataToQueue>
 8000d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d010      	beq.n	8000db6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d96:	3324      	adds	r3, #36	; 0x24
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 faa1 	bl	80022e0 <xTaskRemoveFromEventList>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000da4:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <xQueueGenericSend+0x1f0>)
 8000da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	f3bf 8f4f 	dsb	sy
 8000db0:	f3bf 8f6f 	isb	sy
 8000db4:	e00a      	b.n	8000dcc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000dbc:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <xQueueGenericSend+0x1f0>)
 8000dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dcc:	f7ff fbe6 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e063      	b.n	8000e9c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d103      	bne.n	8000de2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dda:	f7ff fbdf 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e05c      	b.n	8000e9c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fad9 	bl	80023a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000df2:	2301      	movs	r3, #1
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000df6:	f7ff fbd1 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000dfa:	f001 f82d 	bl	8001e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dfe:	f7ff fb9f 	bl	8000540 <vPortEnterCritical>
 8000e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0e:	d103      	bne.n	8000e18 <xQueueGenericSend+0x164>
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d103      	bne.n	8000e2e <xQueueGenericSend+0x17a>
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e2e:	f7ff fbb5 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e32:	1d3a      	adds	r2, r7, #4
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fad6 	bl	80023ec <xTaskCheckForTimeOut>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d124      	bne.n	8000e90 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e48:	f000 faee 	bl	8001428 <prvIsQueueFull>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d018      	beq.n	8000e84 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e54:	3310      	adds	r3, #16
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f9f2 	bl	8002244 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e62:	f000 fa79 	bl	8001358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e66:	f001 f805 	bl	8001e74 <xTaskResumeAll>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f af7c 	bne.w	8000d6a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <xQueueGenericSend+0x1f0>)
 8000e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	f3bf 8f6f 	isb	sy
 8000e82:	e772      	b.n	8000d6a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e86:	f000 fa67 	bl	8001358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e8a:	f000 fff3 	bl	8001e74 <xTaskResumeAll>
 8000e8e:	e76c      	b.n	8000d6a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e92:	f000 fa61 	bl	8001358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e96:	f000 ffed 	bl	8001e74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e9a:	2300      	movs	r3, #0
		}
	}
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	e000ed04 	.word	0xe000ed04

08000ea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d109      	bne.n	8000ed4 <xQueueGenericSendFromISR+0x2c>
 8000ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	e7fe      	b.n	8000ed2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d103      	bne.n	8000ee2 <xQueueGenericSendFromISR+0x3a>
 8000eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <xQueueGenericSendFromISR+0x3e>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <xQueueGenericSendFromISR+0x40>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <xQueueGenericSendFromISR+0x58>
 8000eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef0:	f383 8811 	msr	BASEPRI, r3
 8000ef4:	f3bf 8f6f 	isb	sy
 8000ef8:	f3bf 8f4f 	dsb	sy
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	e7fe      	b.n	8000efe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d103      	bne.n	8000f0e <xQueueGenericSendFromISR+0x66>
 8000f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <xQueueGenericSendFromISR+0x6a>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <xQueueGenericSendFromISR+0x6c>
 8000f12:	2300      	movs	r3, #0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <xQueueGenericSendFromISR+0x84>
 8000f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1c:	f383 8811 	msr	BASEPRI, r3
 8000f20:	f3bf 8f6f 	isb	sy
 8000f24:	f3bf 8f4f 	dsb	sy
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e7fe      	b.n	8000f2a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f2c:	f7ff fbda 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000f30:	f3ef 8211 	mrs	r2, BASEPRI
 8000f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f38:	f383 8811 	msr	BASEPRI, r3
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	61ba      	str	r2, [r7, #24]
 8000f46:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f48:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d302      	bcc.n	8000f5e <xQueueGenericSendFromISR+0xb6>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d12c      	bne.n	8000fb8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6e:	f000 f963 	bl	8001238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f72:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7a:	d112      	bne.n	8000fa2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d016      	beq.n	8000fb2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f86:	3324      	adds	r3, #36	; 0x24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f9a9 	bl	80022e0 <xTaskRemoveFromEventList>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00e      	beq.n	8000fb2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	e007      	b.n	8000fb2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fb6:	e001      	b.n	8000fbc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d109      	bne.n	8001000 <xQueueGenericReceive+0x30>
	__asm volatile
 8000fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff0:	f383 8811 	msr	BASEPRI, r3
 8000ff4:	f3bf 8f6f 	isb	sy
 8000ff8:	f3bf 8f4f 	dsb	sy
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffe:	e7fe      	b.n	8000ffe <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <xQueueGenericReceive+0x3e>
 8001006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <xQueueGenericReceive+0x42>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <xQueueGenericReceive+0x44>
 8001012:	2300      	movs	r3, #0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d109      	bne.n	800102c <xQueueGenericReceive+0x5c>
 8001018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	623b      	str	r3, [r7, #32]
 800102a:	e7fe      	b.n	800102a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800102c:	f001 fb24 	bl	8002678 <xTaskGetSchedulerState>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <xQueueGenericReceive+0x6c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <xQueueGenericReceive+0x70>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <xQueueGenericReceive+0x72>
 8001040:	2300      	movs	r3, #0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <xQueueGenericReceive+0x8a>
 8001046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800104a:	f383 8811 	msr	BASEPRI, r3
 800104e:	f3bf 8f6f 	isb	sy
 8001052:	f3bf 8f4f 	dsb	sy
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e7fe      	b.n	8001058 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800105a:	f7ff fa71 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	2b00      	cmp	r3, #0
 8001068:	d046      	beq.n	80010f8 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001074:	f000 f94a 	bl	800130c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d121      	bne.n	80010c2 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001084:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800108e:	f001 fc0b 	bl	80028a8 <pvTaskIncrementMutexHeldCount>
 8001092:	4602      	mov	r2, r0
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d027      	beq.n	80010f0 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a2:	3310      	adds	r3, #16
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 f91b 	bl	80022e0 <xTaskRemoveFromEventList>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d01f      	beq.n	80010f0 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010b0:	4b4f      	ldr	r3, [pc, #316]	; (80011f0 <xQueueGenericReceive+0x220>)
 80010b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	f3bf 8f6f 	isb	sy
 80010c0:	e016      	b.n	80010f0 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010c6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00f      	beq.n	80010f0 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d2:	3324      	adds	r3, #36	; 0x24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 f903 	bl	80022e0 <xTaskRemoveFromEventList>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <xQueueGenericReceive+0x220>)
 80010e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80010f0:	f7ff fa54 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e077      	b.n	80011e8 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d103      	bne.n	8001106 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010fe:	f7ff fa4d 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001102:	2300      	movs	r3, #0
 8001104:	e070      	b.n	80011e8 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f947 	bl	80023a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001116:	2301      	movs	r3, #1
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800111a:	f7ff fa3f 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800111e:	f000 fe9b 	bl	8001e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001122:	f7ff fa0d 	bl	8000540 <vPortEnterCritical>
 8001126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800112c:	b25b      	sxtb	r3, r3
 800112e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001132:	d103      	bne.n	800113c <xQueueGenericReceive+0x16c>
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001142:	b25b      	sxtb	r3, r3
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d103      	bne.n	8001152 <xQueueGenericReceive+0x182>
 800114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001152:	f7ff fa23 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001156:	1d3a      	adds	r2, r7, #4
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f001 f944 	bl	80023ec <xTaskCheckForTimeOut>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d131      	bne.n	80011ce <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800116a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800116c:	f000 f946 	bl	80013fc <prvIsQueueEmpty>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d025      	beq.n	80011c2 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d108      	bne.n	8001190 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 800117e:	f7ff f9df 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fa94 	bl	80026b4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800118c:	f7ff fa06 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	3324      	adds	r3, #36	; 0x24
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f001 f853 	bl	8002244 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800119e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011a0:	f000 f8da 	bl	8001358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011a4:	f000 fe66 	bl	8001e74 <xTaskResumeAll>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f47f af55 	bne.w	800105a <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <xQueueGenericReceive+0x220>)
 80011b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	e74b      	b.n	800105a <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c4:	f000 f8c8 	bl	8001358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c8:	f000 fe54 	bl	8001e74 <xTaskResumeAll>
 80011cc:	e745      	b.n	800105a <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d0:	f000 f8c2 	bl	8001358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011d4:	f000 fe4e 	bl	8001e74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011da:	f000 f90f 	bl	80013fc <prvIsQueueEmpty>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f43f af3a 	beq.w	800105a <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	e000ed04 	.word	0xe000ed04

080011f4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <uxQueueSpacesAvailable+0x26>
 8001206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120a:	f383 8811 	msr	BASEPRI, r3
 800120e:	f3bf 8f6f 	isb	sy
 8001212:	f3bf 8f4f 	dsb	sy
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e7fe      	b.n	8001218 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800121a:	f7ff f991 	bl	8000540 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800122a:	f7ff f9b7 	bl	800059c <vPortExitCritical>

	return uxReturn;
 800122e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10d      	bne.n	8001272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d14d      	bne.n	80012fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fa9c 	bl	80027a0 <xTaskPriorityDisinherit>
 8001268:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	e043      	b.n	80012fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d119      	bne.n	80012ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6898      	ldr	r0, [r3, #8]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	461a      	mov	r2, r3
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	f003 fda2 	bl	8004dcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	441a      	add	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d32b      	bcc.n	80012fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	e026      	b.n	80012fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68d8      	ldr	r0, [r3, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	461a      	mov	r2, r3
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	f003 fd88 	bl	8004dcc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	425b      	negs	r3, r3
 80012c6:	441a      	add	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d207      	bcs.n	80012e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	425b      	negs	r3, r3
 80012e2:	441a      	add	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d105      	bne.n	80012fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001302:	697b      	ldr	r3, [r7, #20]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d018      	beq.n	8001350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	441a      	add	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d303      	bcc.n	8001340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68d9      	ldr	r1, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	461a      	mov	r2, r3
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f003 fd3e 	bl	8004dcc <memcpy>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001360:	f7ff f8ee 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800136a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800136c:	e011      	b.n	8001392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	2b00      	cmp	r3, #0
 8001374:	d012      	beq.n	800139c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3324      	adds	r3, #36	; 0x24
 800137a:	4618      	mov	r0, r3
 800137c:	f000 ffb0 	bl	80022e0 <xTaskRemoveFromEventList>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001386:	f001 f88f 	bl	80024a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3b01      	subs	r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dce9      	bgt.n	800136e <prvUnlockQueue+0x16>
 800139a:	e000      	b.n	800139e <prvUnlockQueue+0x46>
					break;
 800139c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	22ff      	movs	r2, #255	; 0xff
 80013a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80013a6:	f7ff f8f9 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013aa:	f7ff f8c9 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013b6:	e011      	b.n	80013dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d012      	beq.n	80013e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3310      	adds	r3, #16
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 ff8b 	bl	80022e0 <xTaskRemoveFromEventList>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013d0:	f001 f86a 	bl	80024a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dce9      	bgt.n	80013b8 <prvUnlockQueue+0x60>
 80013e4:	e000      	b.n	80013e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013f0:	f7ff f8d4 	bl	800059c <vPortExitCritical>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001404:	f7ff f89c 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e001      	b.n	800141a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800141a:	f7ff f8bf 	bl	800059c <vPortExitCritical>

	return xReturn;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001430:	f7ff f886 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143c:	429a      	cmp	r2, r3
 800143e:	d102      	bne.n	8001446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001440:	2301      	movs	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e001      	b.n	800144a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800144a:	f7ff f8a7 	bl	800059c <vPortExitCritical>

	return xReturn;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e014      	b.n	8001492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <vQueueAddToRegistry+0x4c>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10b      	bne.n	800148c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001474:	490b      	ldr	r1, [pc, #44]	; (80014a4 <vQueueAddToRegistry+0x4c>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <vQueueAddToRegistry+0x4c>)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800148a:	e005      	b.n	8001498 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3301      	adds	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b07      	cmp	r3, #7
 8001496:	d9e7      	bls.n	8001468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	2000f440 	.word	0x2000f440

080014a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014b8:	f7ff f842 	bl	8000540 <vPortEnterCritical>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d103      	bne.n	80014d2 <vQueueWaitForMessageRestricted+0x2a>
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014de:	d103      	bne.n	80014e8 <vQueueWaitForMessageRestricted+0x40>
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014e8:	f7ff f858 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3324      	adds	r3, #36	; 0x24
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fec5 	bl	800228c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff28 	bl	8001358 <prvUnlockQueue>
	}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af04      	add	r7, sp, #16
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	4613      	mov	r3, r2
 800151e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f91b 	bl	8000760 <pvPortMalloc>
 800152a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00e      	beq.n	8001550 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001532:	2060      	movs	r0, #96	; 0x60
 8001534:	f7ff f914 	bl	8000760 <pvPortMalloc>
 8001538:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
 8001546:	e005      	b.n	8001554 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001548:	6978      	ldr	r0, [r7, #20]
 800154a:	f7ff f9cf 	bl	80008ec <vPortFree>
 800154e:	e001      	b.n	8001554 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d013      	beq.n	8001582 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800155a:	88fa      	ldrh	r2, [r7, #6]
 800155c:	2300      	movs	r3, #0
 800155e:	9303      	str	r3, [sp, #12]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f80e 	bl	8001592 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001576:	69f8      	ldr	r0, [r7, #28]
 8001578:	f000 f892 	bl	80016a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	e002      	b.n	8001588 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001588:	69bb      	ldr	r3, [r7, #24]
	}
 800158a:	4618      	mov	r0, r3
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b088      	sub	sp, #32
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	461a      	mov	r2, r3
 80015aa:	21a5      	movs	r1, #165	; 0xa5
 80015ac:	f003 fc19 	bl	8004de2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80015b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ba:	3b01      	subs	r3, #1
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f023 0307 	bic.w	r3, r3, #7
 80015c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <prvInitialiseNewTask+0x56>
 80015d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d8:	f383 8811 	msr	BASEPRI, r3
 80015dc:	f3bf 8f6f 	isb	sy
 80015e0:	f3bf 8f4f 	dsb	sy
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e7fe      	b.n	80015e6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	e012      	b.n	8001614 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	7819      	ldrb	r1, [r3, #0]
 80015f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	3334      	adds	r3, #52	; 0x34
 80015fe:	460a      	mov	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b13      	cmp	r3, #19
 8001618:	d9e9      	bls.n	80015ee <prvInitialiseNewTask+0x5c>
 800161a:	e000      	b.n	800161e <prvInitialiseNewTask+0x8c>
		{
			break;
 800161c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001628:	2b1f      	cmp	r3, #31
 800162a:	d901      	bls.n	8001630 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800162c:	231f      	movs	r3, #31
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	2200      	movs	r2, #0
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001644:	3304      	adds	r3, #4
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fde2 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	3318      	adds	r3, #24
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fddd 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800165a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	f1c3 0220 	rsb	r2, r3, #32
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166e:	2200      	movs	r2, #0
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	2200      	movs	r2, #0
 8001676:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	69b8      	ldr	r0, [r7, #24]
 8001680:	f7fe fe5a 	bl	8000338 <pxPortInitialiseStack>
 8001684:	4602      	mov	r2, r0
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80016a8:	f7fe ff4a 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <prvAddNewTaskToReadyList+0xc0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <prvAddNewTaskToReadyList+0xc0>)
 80016b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <prvAddNewTaskToReadyList+0xc4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016be:	4a29      	ldr	r2, [pc, #164]	; (8001764 <prvAddNewTaskToReadyList+0xc4>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <prvAddNewTaskToReadyList+0xc0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d110      	bne.n	80016ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016cc:	f000 ff12 	bl	80024f4 <prvInitialiseTaskLists>
 80016d0:	e00d      	b.n	80016ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <prvAddNewTaskToReadyList+0xc8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <prvAddNewTaskToReadyList+0xc4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d802      	bhi.n	80016ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016e8:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <prvAddNewTaskToReadyList+0xc4>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <prvAddNewTaskToReadyList+0xcc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <prvAddNewTaskToReadyList+0xcc>)
 80016f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <prvAddNewTaskToReadyList+0xcc>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2201      	movs	r2, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <prvAddNewTaskToReadyList+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4313      	orrs	r3, r2
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <prvAddNewTaskToReadyList+0xd0>)
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <prvAddNewTaskToReadyList+0xd4>)
 8001720:	441a      	add	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3304      	adds	r3, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f7fe fd7e 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800172e:	f7fe ff35 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <prvAddNewTaskToReadyList+0xc8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00e      	beq.n	8001758 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <prvAddNewTaskToReadyList+0xc4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <prvAddNewTaskToReadyList+0xd8>)
 800174a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	f3bf 8f4f 	dsb	sy
 8001754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000f3a8 	.word	0x2000f3a8
 8001764:	2000f0b4 	.word	0x2000f0b4
 8001768:	2000f3b4 	.word	0x2000f3b4
 800176c:	2000f3c4 	.word	0x2000f3c4
 8001770:	2000f3b0 	.word	0x2000f3b0
 8001774:	2000f0b8 	.word	0x2000f0b8
 8001778:	e000ed04 	.word	0xe000ed04

0800177c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001784:	f7fe fedc 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <vTaskDelete+0x18>
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <vTaskDelete+0xf4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	e000      	b.n	8001796 <vTaskDelete+0x1a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3304      	adds	r3, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fda1 	bl	80002e4 <uxListRemove>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d115      	bne.n	80017d4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	4931      	ldr	r1, [pc, #196]	; (8001874 <vTaskDelete+0xf8>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10a      	bne.n	80017d4 <vTaskDelete+0x58>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	2201      	movs	r2, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43da      	mvns	r2, r3
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <vTaskDelete+0xfc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4013      	ands	r3, r2
 80017d0:	4a29      	ldr	r2, [pc, #164]	; (8001878 <vTaskDelete+0xfc>)
 80017d2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3318      	adds	r3, #24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd7f 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <vTaskDelete+0x100>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a23      	ldr	r2, [pc, #140]	; (800187c <vTaskDelete+0x100>)
 80017ee:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <vTaskDelete+0xf4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d10b      	bne.n	8001812 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3304      	adds	r3, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	481f      	ldr	r0, [pc, #124]	; (8001880 <vTaskDelete+0x104>)
 8001802:	f7fe fd12 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <vTaskDelete+0x108>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <vTaskDelete+0x108>)
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e009      	b.n	8001826 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <vTaskDelete+0x10c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <vTaskDelete+0x10c>)
 800181a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 fee5 	bl	80025ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001822:	f000 fef3 	bl	800260c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001826:	f7fe feb9 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <vTaskDelete+0x110>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d01a      	beq.n	8001868 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <vTaskDelete+0xf4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d115      	bne.n	8001868 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <vTaskDelete+0x114>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <vTaskDelete+0xdc>
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	e7fe      	b.n	8001856 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <vTaskDelete+0x118>)
 800185a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f3bf 8f4f 	dsb	sy
 8001864:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000f0b4 	.word	0x2000f0b4
 8001874:	2000f0b8 	.word	0x2000f0b8
 8001878:	2000f3b0 	.word	0x2000f3b0
 800187c:	2000f3c4 	.word	0x2000f3c4
 8001880:	2000f37c 	.word	0x2000f37c
 8001884:	2000f390 	.word	0x2000f390
 8001888:	2000f3a8 	.word	0x2000f3a8
 800188c:	2000f3b4 	.word	0x2000f3b4
 8001890:	2000f3d0 	.word	0x2000f3d0
 8001894:	e000ed04 	.word	0xe000ed04

08001898 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <vTaskDelayUntil+0x28>
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e7fe      	b.n	80018be <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <vTaskDelayUntil+0x42>
 80018c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ca:	f383 8811 	msr	BASEPRI, r3
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	e7fe      	b.n	80018d8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <vTaskDelayUntil+0xe8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <vTaskDelayUntil+0x5e>
 80018e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e7fe      	b.n	80018f4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80018f6:	f000 faaf 	bl	8001e58 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <vTaskDelayUntil+0xec>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4413      	add	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	429a      	cmp	r2, r3
 8001912:	d90b      	bls.n	800192c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	429a      	cmp	r2, r3
 800191c:	d911      	bls.n	8001942 <vTaskDelayUntil+0xaa>
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	429a      	cmp	r2, r3
 8001924:	d90d      	bls.n	8001942 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001926:	2301      	movs	r3, #1
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e00a      	b.n	8001942 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	429a      	cmp	r2, r3
 8001934:	d803      	bhi.n	800193e <vTaskDelayUntil+0xa6>
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	429a      	cmp	r2, r3
 800193c:	d901      	bls.n	8001942 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f000 ffba 	bl	80028d0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800195c:	f000 fa8a 	bl	8001e74 <xTaskResumeAll>
 8001960:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <vTaskDelayUntil+0xf0>)
 800196a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000f3d0 	.word	0x2000f3d0
 8001984:	2000f3ac 	.word	0x2000f3ac
 8001988:	e000ed04 	.word	0xe000ed04

0800198c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <vTaskDelay+0x60>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <vTaskDelay+0x2e>
 80019a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019aa:	f383 8811 	msr	BASEPRI, r3
 80019ae:	f3bf 8f6f 	isb	sy
 80019b2:	f3bf 8f4f 	dsb	sy
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	e7fe      	b.n	80019b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80019ba:	f000 fa4d 	bl	8001e58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80019be:	2100      	movs	r1, #0
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 ff85 	bl	80028d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80019c6:	f000 fa55 	bl	8001e74 <xTaskResumeAll>
 80019ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <vTaskDelay+0x64>)
 80019d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f3bf 8f4f 	dsb	sy
 80019de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000f3d0 	.word	0x2000f3d0
 80019f0:	e000ed04 	.word	0xe000ed04

080019f4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80019fc:	f7fe fda0 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <uxTaskPriorityGet+0x18>
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <uxTaskPriorityGet+0x30>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	e000      	b.n	8001a0e <uxTaskPriorityGet+0x1a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8001a16:	f7fe fdc1 	bl	800059c <vPortExitCritical>

		return uxReturn;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
	}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000f0b4 	.word	0x2000f0b4

08001a28 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b1f      	cmp	r3, #31
 8001a3a:	d909      	bls.n	8001a50 <vTaskPrioritySet+0x28>
 8001a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a40:	f383 8811 	msr	BASEPRI, r3
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	e7fe      	b.n	8001a4e <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b1f      	cmp	r3, #31
 8001a54:	d901      	bls.n	8001a5a <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a56:	231f      	movs	r3, #31
 8001a58:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001a5a:	f7fe fd71 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <vTaskPrioritySet+0x42>
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <vTaskPrioritySet+0x14c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	e000      	b.n	8001a6c <vTaskPrioritySet+0x44>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a72:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d074      	beq.n	8001b66 <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d90d      	bls.n	8001aa0 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8001a84:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <vTaskPrioritySet+0x14c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d00f      	beq.n	8001aae <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <vTaskPrioritySet+0x14c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d809      	bhi.n	8001aae <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e006      	b.n	8001aae <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001aa0:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <vTaskPrioritySet+0x14c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d101      	bne.n	8001aae <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d102      	bne.n	8001ac6 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	651a      	str	r2, [r3, #80]	; 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db04      	blt.n	8001ade <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f1c3 0220 	rsb	r2, r3, #32
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	6959      	ldr	r1, [r3, #20]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <vTaskPrioritySet+0x150>)
 8001aee:	4413      	add	r3, r2
 8001af0:	4299      	cmp	r1, r3
 8001af2:	d101      	bne.n	8001af8 <vTaskPrioritySet+0xd0>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <vTaskPrioritySet+0xd2>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d028      	beq.n	8001b50 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	3304      	adds	r3, #4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fbee 	bl	80002e4 <uxListRemove>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001b0e:	2201      	movs	r2, #1
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <vTaskPrioritySet+0x154>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <vTaskPrioritySet+0x154>)
 8001b20:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	2201      	movs	r2, #1
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <vTaskPrioritySet+0x154>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <vTaskPrioritySet+0x154>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <vTaskPrioritySet+0x150>)
 8001b42:	441a      	add	r2, r3
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	3304      	adds	r3, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f7fe fb6d 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <vTaskPrioritySet+0x158>)
 8001b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001b66:	f7fe fd19 	bl	800059c <vPortExitCritical>
	}
 8001b6a:	bf00      	nop
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000f0b4 	.word	0x2000f0b4
 8001b78:	2000f0b8 	.word	0x2000f0b8
 8001b7c:	2000f3b0 	.word	0x2000f3b0
 8001b80:	e000ed04 	.word	0xe000ed04

08001b84 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001b8c:	f7fe fcd8 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <vTaskSuspend+0x18>
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <vTaskSuspend+0xf0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e000      	b.n	8001b9e <vTaskSuspend+0x1a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fb9d 	bl	80002e4 <uxListRemove>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	4930      	ldr	r1, [pc, #192]	; (8001c78 <vTaskSuspend+0xf4>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10a      	bne.n	8001bdc <vTaskSuspend+0x58>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	2201      	movs	r2, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <vTaskSuspend+0xf8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <vTaskSuspend+0xf8>)
 8001bda:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3318      	adds	r3, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fb7b 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4822      	ldr	r0, [pc, #136]	; (8001c80 <vTaskSuspend+0xfc>)
 8001bf6:	f7fe fb18 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001bfa:	f7fe fccf 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <vTaskSuspend+0x100>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001c06:	f7fe fc9b 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001c0a:	f000 fcff 	bl	800260c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001c0e:	f7fe fcc5 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <vTaskSuspend+0xf0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d126      	bne.n	8001c6a <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <vTaskSuspend+0x100>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <vTaskSuspend+0x104>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <vTaskSuspend+0xbc>
 8001c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c30:	f383 8811 	msr	BASEPRI, r3
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	e7fe      	b.n	8001c3e <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <vTaskSuspend+0x108>)
 8001c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c50:	e00b      	b.n	8001c6a <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <vTaskSuspend+0xfc>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <vTaskSuspend+0x10c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d103      	bne.n	8001c66 <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <vTaskSuspend+0xf0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
	}
 8001c64:	e001      	b.n	8001c6a <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 8001c66:	f000 fa6d 	bl	8002144 <vTaskSwitchContext>
	}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000f0b4 	.word	0x2000f0b4
 8001c78:	2000f0b8 	.word	0x2000f0b8
 8001c7c:	2000f3b0 	.word	0x2000f3b0
 8001c80:	2000f394 	.word	0x2000f394
 8001c84:	2000f3b4 	.word	0x2000f3b4
 8001c88:	2000f3d0 	.word	0x2000f3d0
 8001c8c:	e000ed04 	.word	0xe000ed04
 8001c90:	2000f3a8 	.word	0x2000f3a8

08001c94 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <prvTaskIsTaskSuspended+0x2a>
 8001caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e7fe      	b.n	8001cbc <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <prvTaskIsTaskSuspended+0x6c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <prvTaskIsTaskSuspended+0x38>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <prvTaskIsTaskSuspended+0x3a>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00f      	beq.n	8001cf2 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <prvTaskIsTaskSuspended+0x70>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00a      	beq.n	8001cf2 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <prvTaskIsTaskSuspended+0x54>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <prvTaskIsTaskSuspended+0x56>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001cf2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	2000f394 	.word	0x2000f394
 8001d04:	2000f368 	.word	0x2000f368

08001d08 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <vTaskResume+0x26>
 8001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	e7fe      	b.n	8001d2c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d039      	beq.n	8001da8 <vTaskResume+0xa0>
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <vTaskResume+0xa8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d034      	beq.n	8001da8 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001d3e:	f7fe fbff 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff ffa6 	bl	8001c94 <prvTaskIsTaskSuspended>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d02a      	beq.n	8001da4 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fac6 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <vTaskResume+0xac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <vTaskResume+0xac>)
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <vTaskResume+0xb0>)
 8001d78:	441a      	add	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f7fe fa52 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <vTaskResume+0xa8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d307      	bcc.n	8001da4 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <vTaskResume+0xb4>)
 8001d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001da4:	f7fe fbfa 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	2000f0b4 	.word	0x2000f0b4
 8001db4:	2000f3b0 	.word	0x2000f3b0
 8001db8:	2000f0b8 	.word	0x2000f0b8
 8001dbc:	e000ed04 	.word	0xe000ed04

08001dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <vTaskStartScheduler+0x80>)
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2282      	movs	r2, #130	; 0x82
 8001dd2:	491c      	ldr	r1, [pc, #112]	; (8001e44 <vTaskStartScheduler+0x84>)
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <vTaskStartScheduler+0x88>)
 8001dd6:	f7ff fb9b 	bl	8001510 <xTaskCreate>
 8001dda:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d102      	bne.n	8001de8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001de2:	f000 fddb 	bl	800299c <xTimerCreateTimerTask>
 8001de6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d115      	bne.n	8001e1a <vTaskStartScheduler+0x5a>
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <vTaskStartScheduler+0x8c>)
 8001e02:	f04f 32ff 	mov.w	r2, #4294967295
 8001e06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <vTaskStartScheduler+0x90>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <vTaskStartScheduler+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001e14:	f7fe fb08 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001e18:	e00d      	b.n	8001e36 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d109      	bne.n	8001e36 <vTaskStartScheduler+0x76>
 8001e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	e7fe      	b.n	8001e34 <vTaskStartScheduler+0x74>
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000f3cc 	.word	0x2000f3cc
 8001e44:	08004e10 	.word	0x08004e10
 8001e48:	080024c1 	.word	0x080024c1
 8001e4c:	2000f3c8 	.word	0x2000f3c8
 8001e50:	2000f3b4 	.word	0x2000f3b4
 8001e54:	2000f3ac 	.word	0x2000f3ac

08001e58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <vTaskSuspendAll+0x18>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <vTaskSuspendAll+0x18>)
 8001e64:	6013      	str	r3, [r2, #0]
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	2000f3d0 	.word	0x2000f3d0

08001e74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <xTaskResumeAll+0x114>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <xTaskResumeAll+0x2a>
 8001e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	e7fe      	b.n	8001e9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e9e:	f7fe fb4f 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <xTaskResumeAll+0x114>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <xTaskResumeAll+0x114>)
 8001eaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <xTaskResumeAll+0x114>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d161      	bne.n	8001f78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001eb4:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <xTaskResumeAll+0x118>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d05d      	beq.n	8001f78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ebc:	e02e      	b.n	8001f1c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <xTaskResumeAll+0x11c>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3318      	adds	r3, #24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fa0a 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fa05 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	2201      	movs	r2, #1
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <xTaskResumeAll+0x120>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <xTaskResumeAll+0x120>)
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <xTaskResumeAll+0x124>)
 8001efa:	441a      	add	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3304      	adds	r3, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f7fe f991 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <xTaskResumeAll+0x128>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <xTaskResumeAll+0x12c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <xTaskResumeAll+0x11c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1cc      	bne.n	8001ebe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001f2a:	f000 fb6f 	bl	800260c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <xTaskResumeAll+0x130>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d010      	beq.n	8001f5c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001f3a:	f000 f847 	bl	8001fcc <xTaskIncrementTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <xTaskResumeAll+0x12c>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f1      	bne.n	8001f3a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <xTaskResumeAll+0x130>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <xTaskResumeAll+0x12c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <xTaskResumeAll+0x134>)
 8001f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f78:	f7fe fb10 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000f3d0 	.word	0x2000f3d0
 8001f8c:	2000f3a8 	.word	0x2000f3a8
 8001f90:	2000f368 	.word	0x2000f368
 8001f94:	2000f3b0 	.word	0x2000f3b0
 8001f98:	2000f0b8 	.word	0x2000f0b8
 8001f9c:	2000f0b4 	.word	0x2000f0b4
 8001fa0:	2000f3bc 	.word	0x2000f3bc
 8001fa4:	2000f3b8 	.word	0x2000f3b8
 8001fa8:	e000ed04 	.word	0xe000ed04

08001fac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <xTaskGetTickCount+0x1c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	2000f3ac 	.word	0x2000f3ac

08001fcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fd6:	4b50      	ldr	r3, [pc, #320]	; (8002118 <xTaskIncrementTick+0x14c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 808c 	bne.w	80020f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001fe0:	4b4e      	ldr	r3, [pc, #312]	; (800211c <xTaskIncrementTick+0x150>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001fe8:	4a4c      	ldr	r2, [pc, #304]	; (800211c <xTaskIncrementTick+0x150>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d11f      	bne.n	8002034 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <xTaskIncrementTick+0x154>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <xTaskIncrementTick+0x46>
 8001ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	e7fe      	b.n	8002010 <xTaskIncrementTick+0x44>
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <xTaskIncrementTick+0x154>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	4b42      	ldr	r3, [pc, #264]	; (8002124 <xTaskIncrementTick+0x158>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a40      	ldr	r2, [pc, #256]	; (8002120 <xTaskIncrementTick+0x154>)
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4a40      	ldr	r2, [pc, #256]	; (8002124 <xTaskIncrementTick+0x158>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <xTaskIncrementTick+0x15c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <xTaskIncrementTick+0x15c>)
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	f000 faec 	bl	800260c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002034:	4b3d      	ldr	r3, [pc, #244]	; (800212c <xTaskIncrementTick+0x160>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	429a      	cmp	r2, r3
 800203c:	d34d      	bcc.n	80020da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <xTaskIncrementTick+0x154>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <xTaskIncrementTick+0x80>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <xTaskIncrementTick+0x82>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <xTaskIncrementTick+0x160>)
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	601a      	str	r2, [r3, #0]
					break;
 800205a:	e03e      	b.n	80020da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <xTaskIncrementTick+0x154>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	d203      	bcs.n	800207c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002074:	4a2d      	ldr	r2, [pc, #180]	; (800212c <xTaskIncrementTick+0x160>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
						break;
 800207a:	e02e      	b.n	80020da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3304      	adds	r3, #4
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f92f 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3318      	adds	r3, #24
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f926 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <xTaskIncrementTick+0x164>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <xTaskIncrementTick+0x164>)
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <xTaskIncrementTick+0x168>)
 80020b8:	441a      	add	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3304      	adds	r3, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7fe f8b2 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <xTaskIncrementTick+0x16c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3b4      	bcc.n	800203e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020d8:	e7b1      	b.n	800203e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <xTaskIncrementTick+0x16c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e0:	4914      	ldr	r1, [pc, #80]	; (8002134 <xTaskIncrementTick+0x168>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d907      	bls.n	8002102 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e004      	b.n	8002102 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <xTaskIncrementTick+0x170>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <xTaskIncrementTick+0x170>)
 8002100:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <xTaskIncrementTick+0x174>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800210a:	2301      	movs	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800210e:	697b      	ldr	r3, [r7, #20]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000f3d0 	.word	0x2000f3d0
 800211c:	2000f3ac 	.word	0x2000f3ac
 8002120:	2000f360 	.word	0x2000f360
 8002124:	2000f364 	.word	0x2000f364
 8002128:	2000f3c0 	.word	0x2000f3c0
 800212c:	2000f3c8 	.word	0x2000f3c8
 8002130:	2000f3b0 	.word	0x2000f3b0
 8002134:	2000f0b8 	.word	0x2000f0b8
 8002138:	2000f0b4 	.word	0x2000f0b4
 800213c:	2000f3b8 	.word	0x2000f3b8
 8002140:	2000f3bc 	.word	0x2000f3bc

08002144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <vTaskSwitchContext+0xec>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <vTaskSwitchContext+0xf0>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002158:	e065      	b.n	8002226 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <vTaskSwitchContext+0xf0>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <vTaskSwitchContext+0xf4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	429a      	cmp	r2, r3
 8002176:	d111      	bne.n	800219c <vTaskSwitchContext+0x58>
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3304      	adds	r3, #4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	429a      	cmp	r2, r3
 8002182:	d10b      	bne.n	800219c <vTaskSwitchContext+0x58>
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3308      	adds	r3, #8
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	429a      	cmp	r2, r3
 800218e:	d105      	bne.n	800219c <vTaskSwitchContext+0x58>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	330c      	adds	r3, #12
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	429a      	cmp	r2, r3
 800219a:	d008      	beq.n	80021ae <vTaskSwitchContext+0x6a>
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <vTaskSwitchContext+0xf4>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <vTaskSwitchContext+0xf4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3334      	adds	r3, #52	; 0x34
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f001 fbba 	bl	8003922 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <vTaskSwitchContext+0xf8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f1c3 031f 	rsb	r3, r3, #31
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	491e      	ldr	r1, [pc, #120]	; (8002240 <vTaskSwitchContext+0xfc>)
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <vTaskSwitchContext+0xa8>
	__asm volatile
 80021d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	e7fe      	b.n	80021ea <vTaskSwitchContext+0xa6>
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <vTaskSwitchContext+0xfc>)
 80021f8:	4413      	add	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	3308      	adds	r3, #8
 800220e:	429a      	cmp	r2, r3
 8002210:	d104      	bne.n	800221c <vTaskSwitchContext+0xd8>
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <vTaskSwitchContext+0xf4>)
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000f3d0 	.word	0x2000f3d0
 8002234:	2000f3bc 	.word	0x2000f3bc
 8002238:	2000f0b4 	.word	0x2000f0b4
 800223c:	2000f3b0 	.word	0x2000f3b0
 8002240:	2000f0b8 	.word	0x2000f0b8

08002244 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <vTaskPlaceOnEventList+0x24>
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e7fe      	b.n	8002266 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <vTaskPlaceOnEventList+0x44>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3318      	adds	r3, #24
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fd fffe 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002276:	2101      	movs	r1, #1
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f000 fb29 	bl	80028d0 <prvAddCurrentTaskToDelayedList>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000f0b4 	.word	0x2000f0b4

0800228c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <vTaskPlaceOnEventListRestricted+0x26>
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e7fe      	b.n	80022b0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <vTaskPlaceOnEventListRestricted+0x50>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3318      	adds	r3, #24
 80022b8:	4619      	mov	r1, r3
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7fd ffb5 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f000 fafe 	bl	80028d0 <prvAddCurrentTaskToDelayedList>
	}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000f0b4 	.word	0x2000f0b4

080022e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <xTaskRemoveFromEventList+0x2a>
 80022f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e7fe      	b.n	8002308 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	3318      	adds	r3, #24
 800230e:	4618      	mov	r0, r3
 8002310:	f7fd ffe8 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <xTaskRemoveFromEventList+0xac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11c      	bne.n	8002356 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	3304      	adds	r3, #4
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ffdf 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	2201      	movs	r2, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <xTaskRemoveFromEventList+0xb0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	4a16      	ldr	r2, [pc, #88]	; (8002390 <xTaskRemoveFromEventList+0xb0>)
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4a13      	ldr	r2, [pc, #76]	; (8002394 <xTaskRemoveFromEventList+0xb4>)
 8002346:	441a      	add	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	3304      	adds	r3, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f7fd ff6b 	bl	800022a <vListInsertEnd>
 8002354:	e005      	b.n	8002362 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3318      	adds	r3, #24
 800235a:	4619      	mov	r1, r3
 800235c:	480e      	ldr	r0, [pc, #56]	; (8002398 <xTaskRemoveFromEventList+0xb8>)
 800235e:	f7fd ff64 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <xTaskRemoveFromEventList+0xbc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	429a      	cmp	r2, r3
 800236e:	d905      	bls.n	800237c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002370:	2301      	movs	r3, #1
 8002372:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <xTaskRemoveFromEventList+0xc0>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e001      	b.n	8002380 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002380:	697b      	ldr	r3, [r7, #20]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000f3d0 	.word	0x2000f3d0
 8002390:	2000f3b0 	.word	0x2000f3b0
 8002394:	2000f0b8 	.word	0x2000f0b8
 8002398:	2000f368 	.word	0x2000f368
 800239c:	2000f0b4 	.word	0x2000f0b4
 80023a0:	2000f3bc 	.word	0x2000f3bc

080023a4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <vTaskSetTimeOutState+0x22>
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e7fe      	b.n	80023c4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <vTaskSetTimeOutState+0x40>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <vTaskSetTimeOutState+0x44>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	605a      	str	r2, [r3, #4]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	2000f3c0 	.word	0x2000f3c0
 80023e8:	2000f3ac 	.word	0x2000f3ac

080023ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <xTaskCheckForTimeOut+0x24>
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e7fe      	b.n	800240e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <xTaskCheckForTimeOut+0x3e>
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	e7fe      	b.n	8002428 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800242a:	f7fe f889 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <xTaskCheckForTimeOut+0xb4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d102      	bne.n	8002444 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	e026      	b.n	8002492 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <xTaskCheckForTimeOut+0xb8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d007      	beq.n	8002460 <xTaskCheckForTimeOut+0x74>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	429a      	cmp	r2, r3
 8002458:	d802      	bhi.n	8002460 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800245a:	2301      	movs	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e018      	b.n	8002492 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d20e      	bcs.n	800248e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1acb      	subs	r3, r1, r3
 800247c:	441a      	add	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff8e 	bl	80023a4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e001      	b.n	8002492 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800248e:	2301      	movs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002492:	f7fe f883 	bl	800059c <vPortExitCritical>

	return xReturn;
 8002496:	697b      	ldr	r3, [r7, #20]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000f3ac 	.word	0x2000f3ac
 80024a4:	2000f3c0 	.word	0x2000f3c0

080024a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <vTaskMissedYield+0x14>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	2000f3bc 	.word	0x2000f3bc

080024c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80024c8:	f000 f854 	bl	8002574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <prvIdleTask+0x2c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d907      	bls.n	80024e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <prvIdleTask+0x30>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80024e4:	f001 fa23 	bl	800392e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80024e8:	e7ee      	b.n	80024c8 <prvIdleTask+0x8>
 80024ea:	bf00      	nop
 80024ec:	2000f0b8 	.word	0x2000f0b8
 80024f0:	e000ed04 	.word	0xe000ed04

080024f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	e00c      	b.n	800251a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <prvInitialiseTaskLists+0x60>)
 800250c:	4413      	add	r3, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd fe5e 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3301      	adds	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b1f      	cmp	r3, #31
 800251e:	d9ef      	bls.n	8002500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <prvInitialiseTaskLists+0x64>)
 8002522:	f7fd fe55 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <prvInitialiseTaskLists+0x68>)
 8002528:	f7fd fe52 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800252c:	480c      	ldr	r0, [pc, #48]	; (8002560 <prvInitialiseTaskLists+0x6c>)
 800252e:	f7fd fe4f 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002532:	480c      	ldr	r0, [pc, #48]	; (8002564 <prvInitialiseTaskLists+0x70>)
 8002534:	f7fd fe4c 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002538:	480b      	ldr	r0, [pc, #44]	; (8002568 <prvInitialiseTaskLists+0x74>)
 800253a:	f7fd fe49 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <prvInitialiseTaskLists+0x78>)
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <prvInitialiseTaskLists+0x64>)
 8002542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <prvInitialiseTaskLists+0x7c>)
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <prvInitialiseTaskLists+0x68>)
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000f0b8 	.word	0x2000f0b8
 8002558:	2000f338 	.word	0x2000f338
 800255c:	2000f34c 	.word	0x2000f34c
 8002560:	2000f368 	.word	0x2000f368
 8002564:	2000f37c 	.word	0x2000f37c
 8002568:	2000f394 	.word	0x2000f394
 800256c:	2000f360 	.word	0x2000f360
 8002570:	2000f364 	.word	0x2000f364

08002574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800257a:	e028      	b.n	80025ce <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800257c:	f7ff fc6c 	bl	8001e58 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <prvCheckTasksWaitingTermination+0x6c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002590:	f7ff fc70 	bl	8001e74 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800259a:	f7fd ffd1 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <prvCheckTasksWaitingTermination+0x6c>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	3304      	adds	r3, #4
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd fe9a 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <prvCheckTasksWaitingTermination+0x70>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <prvCheckTasksWaitingTermination+0x70>)
 80025b8:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <prvCheckTasksWaitingTermination+0x74>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <prvCheckTasksWaitingTermination+0x74>)
 80025c2:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80025c4:	f7fd ffea 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80025c8:	6838      	ldr	r0, [r7, #0]
 80025ca:	f000 f80f 	bl	80025ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <prvCheckTasksWaitingTermination+0x74>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1d2      	bne.n	800257c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000f37c 	.word	0x2000f37c
 80025e4:	2000f3a8 	.word	0x2000f3a8
 80025e8:	2000f390 	.word	0x2000f390

080025ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe f977 	bl	80008ec <vPortFree>
			vPortFree( pxTCB );
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe f974 	bl	80008ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <prvResetNextTaskUnblockTime+0x44>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <prvResetNextTaskUnblockTime+0x14>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <prvResetNextTaskUnblockTime+0x16>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <prvResetNextTaskUnblockTime+0x48>)
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800262e:	e008      	b.n	8002642 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <prvResetNextTaskUnblockTime+0x44>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <prvResetNextTaskUnblockTime+0x48>)
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	2000f360 	.word	0x2000f360
 8002654:	2000f3c8 	.word	0x2000f3c8

08002658 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <xTaskGetCurrentTaskHandle+0x1c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002664:	687b      	ldr	r3, [r7, #4]
	}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2000f0b4 	.word	0x2000f0b4

08002678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <xTaskGetSchedulerState+0x34>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002686:	2301      	movs	r3, #1
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	e008      	b.n	800269e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <xTaskGetSchedulerState+0x38>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002694:	2302      	movs	r3, #2
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	e001      	b.n	800269e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800269e:	687b      	ldr	r3, [r7, #4]
	}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	2000f3b4 	.word	0x2000f3b4
 80026b0:	2000f3d0 	.word	0x2000f3d0

080026b4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d062      	beq.n	800278c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <vTaskPriorityInherit+0xe0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d25b      	bcs.n	800278c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db06      	blt.n	80026ea <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026dc:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <vTaskPriorityInherit+0xe0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	f1c3 0220 	rsb	r2, r3, #32
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6959      	ldr	r1, [r3, #20]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <vTaskPriorityInherit+0xe4>)
 80026fc:	4413      	add	r3, r2
 80026fe:	4299      	cmp	r1, r3
 8002700:	d101      	bne.n	8002706 <vTaskPriorityInherit+0x52>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <vTaskPriorityInherit+0x54>
 8002706:	2300      	movs	r3, #0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d03a      	beq.n	8002782 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3304      	adds	r3, #4
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fde7 	bl	80002e4 <uxListRemove>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d115      	bne.n	8002748 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	491d      	ldr	r1, [pc, #116]	; (8002798 <vTaskPriorityInherit+0xe4>)
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <vTaskPriorityInherit+0x94>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	2201      	movs	r2, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43da      	mvns	r2, r3
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <vTaskPriorityInherit+0xe8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4013      	ands	r3, r2
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <vTaskPriorityInherit+0xe8>)
 8002746:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <vTaskPriorityInherit+0xe0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	2201      	movs	r2, #1
 8002758:	409a      	lsls	r2, r3
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <vTaskPriorityInherit+0xe8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <vTaskPriorityInherit+0xe8>)
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4a09      	ldr	r2, [pc, #36]	; (8002798 <vTaskPriorityInherit+0xe4>)
 8002772:	441a      	add	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7fd fd55 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002780:	e004      	b.n	800278c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <vTaskPriorityInherit+0xe0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	2000f0b4 	.word	0x2000f0b4
 8002798:	2000f0b8 	.word	0x2000f0b8
 800279c:	2000f3b0 	.word	0x2000f3b0

080027a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d06c      	beq.n	8002890 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <xTaskPriorityDisinherit+0xfc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d009      	beq.n	80027d4 <xTaskPriorityDisinherit+0x34>
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e7fe      	b.n	80027d2 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <xTaskPriorityDisinherit+0x50>
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	e7fe      	b.n	80027ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	429a      	cmp	r2, r3
 8002804:	d044      	beq.n	8002890 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	2b00      	cmp	r3, #0
 800280c:	d140      	bne.n	8002890 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	3304      	adds	r3, #4
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fd66 	bl	80002e4 <uxListRemove>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002822:	491f      	ldr	r1, [pc, #124]	; (80028a0 <xTaskPriorityDisinherit+0x100>)
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <xTaskPriorityDisinherit+0xaa>
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	2201      	movs	r2, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <xTaskPriorityDisinherit+0x104>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4013      	ands	r3, r2
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <xTaskPriorityDisinherit+0x104>)
 8002848:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f1c3 0220 	rsb	r2, r3, #32
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <xTaskPriorityDisinherit+0x104>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <xTaskPriorityDisinherit+0x104>)
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <xTaskPriorityDisinherit+0x100>)
 800287e:	441a      	add	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fd fccf 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002890:	697b      	ldr	r3, [r7, #20]
	}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000f0b4 	.word	0x2000f0b4
 80028a0:	2000f0b8 	.word	0x2000f0b8
 80028a4:	2000f3b0 	.word	0x2000f3b0

080028a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <pvTaskIncrementMutexHeldCount+0x24>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <pvTaskIncrementMutexHeldCount+0x24>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ba:	3201      	adds	r2, #1
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80028be:	4b03      	ldr	r3, [pc, #12]	; (80028cc <pvTaskIncrementMutexHeldCount+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
	}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	2000f0b4 	.word	0x2000f0b4

080028d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <prvAddCurrentTaskToDelayedList+0xb0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3304      	adds	r3, #4
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fcfc 	bl	80002e4 <uxListRemove>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2201      	movs	r2, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4013      	ands	r3, r2
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002908:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d10a      	bne.n	8002928 <prvAddCurrentTaskToDelayedList+0x58>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	481a      	ldr	r0, [pc, #104]	; (800298c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002922:	f7fd fc82 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002926:	e026      	b.n	8002976 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d209      	bcs.n	8002954 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3304      	adds	r3, #4
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f7fd fc90 	bl	8000272 <vListInsert>
}
 8002952:	e010      	b.n	8002976 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3304      	adds	r3, #4
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7fd fc86 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	d202      	bcs.n	8002976 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6013      	str	r3, [r2, #0]
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2000f3ac 	.word	0x2000f3ac
 8002984:	2000f0b4 	.word	0x2000f0b4
 8002988:	2000f3b0 	.word	0x2000f3b0
 800298c:	2000f394 	.word	0x2000f394
 8002990:	2000f364 	.word	0x2000f364
 8002994:	2000f360 	.word	0x2000f360
 8002998:	2000f3c8 	.word	0x2000f3c8

0800299c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80029a6:	f000 fa8f 	bl	8002ec8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <xTimerCreateTimerTask+0x54>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <xTimerCreateTimerTask+0x58>)
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	231e      	movs	r3, #30
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2300      	movs	r3, #0
 80029bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029c0:	490d      	ldr	r1, [pc, #52]	; (80029f8 <xTimerCreateTimerTask+0x5c>)
 80029c2:	480e      	ldr	r0, [pc, #56]	; (80029fc <xTimerCreateTimerTask+0x60>)
 80029c4:	f7fe fda4 	bl	8001510 <xTaskCreate>
 80029c8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <xTimerCreateTimerTask+0x48>
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	e7fe      	b.n	80029e2 <xTimerCreateTimerTask+0x46>
	return xReturn;
 80029e4:	687b      	ldr	r3, [r7, #4]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000f404 	.word	0x2000f404
 80029f4:	2000f408 	.word	0x2000f408
 80029f8:	08004e18 	.word	0x08004e18
 80029fc:	08002b19 	.word	0x08002b19

08002a00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <xTimerGenericCommand+0x2c>
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	e7fe      	b.n	8002a2a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <xTimerGenericCommand+0x94>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02a      	beq.n	8002a8a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	dc18      	bgt.n	8002a78 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a46:	f7ff fe17 	bl	8002678 <xTaskGetSchedulerState>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d109      	bne.n	8002a64 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <xTimerGenericCommand+0x94>)
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	f107 0114 	add.w	r1, r7, #20
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5c:	f7fe f92a 	bl	8000cb4 <xQueueGenericSend>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24
 8002a62:	e012      	b.n	8002a8a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <xTimerGenericCommand+0x94>)
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f107 0114 	add.w	r1, r7, #20
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f7fe f920 	bl	8000cb4 <xQueueGenericSend>
 8002a74:	6278      	str	r0, [r7, #36]	; 0x24
 8002a76:	e008      	b.n	8002a8a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <xTimerGenericCommand+0x94>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f107 0114 	add.w	r1, r7, #20
 8002a80:	2300      	movs	r3, #0
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	f7fe fa10 	bl	8000ea8 <xQueueGenericSendFromISR>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2000f404 	.word	0x2000f404

08002a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <prvProcessExpiredTimer+0x7c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fc17 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d121      	bne.n	8002b02 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	18d1      	adds	r1, r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	6978      	ldr	r0, [r7, #20]
 8002acc:	f000 f8c8 	bl	8002c60 <prvInsertTimerInActiveList>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d015      	beq.n	8002b02 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2300      	movs	r3, #0
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f7ff ff8d 	bl	8002a00 <xTimerGenericCommand>
 8002ae6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <prvProcessExpiredTimer+0x6a>
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e7fe      	b.n	8002b00 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	4798      	blx	r3
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000f3fc 	.word	0x2000f3fc

08002b18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f857 	bl	8002bd8 <prvGetNextExpireTime>
 8002b2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f803 	bl	8002b3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002b36:	f000 f8d5 	bl	8002ce4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b3a:	e7f1      	b.n	8002b20 <prvTimerTask+0x8>

08002b3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002b46:	f7ff f987 	bl	8001e58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f866 	bl	8002c20 <prvSampleTimeNow>
 8002b54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d130      	bne.n	8002bbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <prvProcessTimerOrBlockTask+0x3c>
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d806      	bhi.n	8002b78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002b6a:	f7ff f983 	bl	8001e74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b6e:	68f9      	ldr	r1, [r7, #12]
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff91 	bl	8002a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b76:	e024      	b.n	8002bc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <prvProcessTimerOrBlockTask+0x90>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <prvProcessTimerOrBlockTask+0x94>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fe fc83 	bl	80014a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002ba2:	f7ff f967 	bl	8001e74 <xTaskResumeAll>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <prvProcessTimerOrBlockTask+0x98>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
}
 8002bbc:	e001      	b.n	8002bc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002bbe:	f7ff f959 	bl	8001e74 <xTaskResumeAll>
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000f400 	.word	0x2000f400
 8002bd0:	2000f404 	.word	0x2000f404
 8002bd4:	e000ed04 	.word	0xe000ed04

08002bd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <prvGetNextExpireTime+0x44>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <prvGetNextExpireTime+0x44>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e001      	b.n	8002c0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	2000f3fc 	.word	0x2000f3fc

08002c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002c28:	f7ff f9c0 	bl	8001fac <xTaskGetTickCount>
 8002c2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <prvSampleTimeNow+0x3c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d205      	bcs.n	8002c44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002c38:	f000 f8e6 	bl	8002e08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e002      	b.n	8002c4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <prvSampleTimeNow+0x3c>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002c50:	68fb      	ldr	r3, [r7, #12]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000f40c 	.word	0x2000f40c

08002c60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d812      	bhi.n	8002cac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	1ad2      	subs	r2, r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e01b      	b.n	8002cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <prvInsertTimerInActiveList+0x7c>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f7fd fae4 	bl	8000272 <vListInsert>
 8002caa:	e012      	b.n	8002cd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d206      	bcs.n	8002cc2 <prvInsertTimerInActiveList+0x62>
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d302      	bcc.n	8002cc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e007      	b.n	8002cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <prvInsertTimerInActiveList+0x80>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7fd fad0 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002cd2:	697b      	ldr	r3, [r7, #20]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000f400 	.word	0x2000f400
 8002ce0:	2000f3fc 	.word	0x2000f3fc

08002ce4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cea:	e07a      	b.n	8002de2 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db77      	blt.n	8002de2 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	3304      	adds	r3, #4
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd faee 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff88 	bl	8002c20 <prvSampleTimeNow>
 8002d10:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d863      	bhi.n	8002de0 <prvProcessReceivedCommands+0xfc>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <prvProcessReceivedCommands+0x3c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002d49 	.word	0x08002d49
 8002d2c:	08002de3 	.word	0x08002de3
 8002d30:	08002da3 	.word	0x08002da3
 8002d34:	08002dd9 	.word	0x08002dd9
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d49 	.word	0x08002d49
 8002d40:	08002de3 	.word	0x08002de3
 8002d44:	08002da3 	.word	0x08002da3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	18d1      	adds	r1, r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a3a      	ldr	r2, [r7, #32]
 8002d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d56:	f7ff ff83 	bl	8002c60 <prvInsertTimerInActiveList>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d040      	beq.n	8002de2 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d66:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d138      	bne.n	8002de2 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	441a      	add	r2, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d82:	f7ff fe3d 	bl	8002a00 <xTimerGenericCommand>
 8002d86:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d129      	bne.n	8002de2 <prvProcessReceivedCommands+0xfe>
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e7fe      	b.n	8002da0 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <prvProcessReceivedCommands+0xe0>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e7fe      	b.n	8002dc2 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	18d1      	adds	r1, r2, r3
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	6a3a      	ldr	r2, [r7, #32]
 8002dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd2:	f7ff ff45 	bl	8002c60 <prvInsertTimerInActiveList>
					break;
 8002dd6:	e004      	b.n	8002de2 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dda:	f7fd fd87 	bl	80008ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002dde:	e000      	b.n	8002de2 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002de0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <prvProcessReceivedCommands+0x120>)
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	f107 0108 	add.w	r1, r7, #8
 8002dea:	2300      	movs	r3, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	f7fe f8ef 	bl	8000fd0 <xQueueGenericReceive>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f af79 	bne.w	8002cec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	; 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000f404 	.word	0x2000f404

08002e08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e0e:	e044      	b.n	8002e9a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <prvSwitchTimerLists+0xb8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <prvSwitchTimerLists+0xb8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fa5b 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	6938      	ldr	r0, [r7, #16]
 8002e34:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d12d      	bne.n	8002e9a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	4413      	add	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d90e      	bls.n	8002e6e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <prvSwitchTimerLists+0xb8>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f7fd fa03 	bl	8000272 <vListInsert>
 8002e6c:	e015      	b.n	8002e9a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	2100      	movs	r1, #0
 8002e78:	6938      	ldr	r0, [r7, #16]
 8002e7a:	f7ff fdc1 	bl	8002a00 <xTimerGenericCommand>
 8002e7e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <prvSwitchTimerLists+0x92>
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	e7fe      	b.n	8002e98 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <prvSwitchTimerLists+0xb8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1b5      	bne.n	8002e10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <prvSwitchTimerLists+0xb8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <prvSwitchTimerLists+0xbc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <prvSwitchTimerLists+0xb8>)
 8002eb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <prvSwitchTimerLists+0xbc>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000f3fc 	.word	0x2000f3fc
 8002ec4:	2000f400 	.word	0x2000f400

08002ec8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002ecc:	f7fd fb38 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <prvCheckForValidListAndQueue+0x54>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11d      	bne.n	8002f14 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002ed8:	4811      	ldr	r0, [pc, #68]	; (8002f20 <prvCheckForValidListAndQueue+0x58>)
 8002eda:	f7fd f979 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002ede:	4811      	ldr	r0, [pc, #68]	; (8002f24 <prvCheckForValidListAndQueue+0x5c>)
 8002ee0:	f7fd f976 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <prvCheckForValidListAndQueue+0x60>)
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <prvCheckForValidListAndQueue+0x58>)
 8002ee8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <prvCheckForValidListAndQueue+0x64>)
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <prvCheckForValidListAndQueue+0x5c>)
 8002eee:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	210c      	movs	r1, #12
 8002ef4:	200c      	movs	r0, #12
 8002ef6:	f7fd fe81 	bl	8000bfc <xQueueGenericCreate>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <prvCheckForValidListAndQueue+0x54>)
 8002efe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <prvCheckForValidListAndQueue+0x54>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <prvCheckForValidListAndQueue+0x54>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4908      	ldr	r1, [pc, #32]	; (8002f30 <prvCheckForValidListAndQueue+0x68>)
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe faa2 	bl	8001458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f14:	f7fd fb42 	bl	800059c <vPortExitCritical>
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	2000f404 	.word	0x2000f404
 8002f20:	2000f3d4 	.word	0x2000f3d4
 8002f24:	2000f3e8 	.word	0x2000f3e8
 8002f28:	2000f3fc 	.word	0x2000f3fc
 8002f2c:	2000f400 	.word	0x2000f400
 8002f30:	08004e20 	.word	0x08004e20

08002f34 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <DAC_SetChannel1Data+0x34>)
 8002f46:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3308      	adds	r3, #8
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	461a      	mov	r2, r3
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	6013      	str	r3, [r2, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40007400 	.word	0x40007400

08002f6c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <DMA_Init+0xac>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002f96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002fa2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002fae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002fba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0307 	bic.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60da      	str	r2, [r3, #12]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	f01c803f 	.word	0xf01c803f

0800301c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800303a:	e005      	b.n	8003048 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 0201 	bic.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	601a      	str	r2, [r3, #0]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e001      	b.n	8003076 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <DMA_GetFlagStatus+0x6c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d802      	bhi.n	80030a4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <DMA_GetFlagStatus+0x70>)
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e001      	b.n	80030a8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <DMA_GetFlagStatus+0x74>)
 80030a6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e002      	b.n	80030c0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80030c6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
 80030da:	e001      	b.n	80030e0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	4002640f 	.word	0x4002640f
 80030f4:	40026000 	.word	0x40026000
 80030f8:	40026400 	.word	0x40026400

080030fc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <DMA_ClearFlag+0x50>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d802      	bhi.n	8003114 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <DMA_ClearFlag+0x54>)
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e001      	b.n	8003118 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <DMA_ClearFlag+0x58>)
 8003116:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003128:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8003130:	e006      	b.n	8003140 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003138:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	6093      	str	r3, [r2, #8]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	4002640f 	.word	0x4002640f
 8003150:	40026000 	.word	0x40026000
 8003154:	40026400 	.word	0x40026400

08003158 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	819a      	strh	r2, [r3, #12]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	891b      	ldrh	r3, [r3, #8]
 800318a:	b29a      	uxth	r2, r3
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e001      	b.n	80031a0 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80031b4:	4b38      	ldr	r3, [pc, #224]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b38      	ldr	r3, [pc, #224]	; (800329c <Audio_MAL_IRQHandler+0xec>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7ff ff60 	bl	8003084 <DMA_GetFlagStatus>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d064      	beq.n	8003294 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80031ca:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <Audio_MAL_IRQHandler+0xf0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d04c      	beq.n	800326c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80031d2:	bf00      	nop
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff3b 	bl	8003054 <DMA_GetCmdStatus>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f7      	bne.n	80031d4 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b2c      	ldr	r3, [pc, #176]	; (800329c <Audio_MAL_IRQHandler+0xec>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f7ff ff84 	bl	80030fc <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <Audio_MAL_IRQHandler+0xf4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <Audio_MAL_IRQHandler+0xf8>)
 80031fc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <Audio_MAL_IRQHandler+0xf0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003206:	4293      	cmp	r3, r2
 8003208:	bf28      	it	cs
 800320a:	4613      	movcs	r3, r2
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <Audio_MAL_IRQHandler+0xf8>)
 800320e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4924      	ldr	r1, [pc, #144]	; (80032a8 <Audio_MAL_IRQHandler+0xf8>)
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fea8 	bl	8002f6c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fefa 	bl	800301c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8003228:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <Audio_MAL_IRQHandler+0xf4>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <Audio_MAL_IRQHandler+0xf0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d203      	bcs.n	800323e <Audio_MAL_IRQHandler+0x8e>
 8003236:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <Audio_MAL_IRQHandler+0xf0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	e000      	b.n	8003240 <Audio_MAL_IRQHandler+0x90>
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <Audio_MAL_IRQHandler+0xfc>)
 8003240:	4413      	add	r3, r2
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <Audio_MAL_IRQHandler+0xf4>)
 8003244:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <Audio_MAL_IRQHandler+0xf0>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <Audio_MAL_IRQHandler+0xf0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003252:	428b      	cmp	r3, r1
 8003254:	bf28      	it	cs
 8003256:	460b      	movcs	r3, r1
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <Audio_MAL_IRQHandler+0xf0>)
 800325c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fed9 	bl	800301c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800326a:	e013      	b.n	8003294 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fed2 	bl	800301c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <Audio_MAL_IRQHandler+0xe8>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <Audio_MAL_IRQHandler+0xec>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f7ff ff3a 	bl	80030fc <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <Audio_MAL_IRQHandler+0xf4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fe52 	bl	8003f38 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	2000000c 	.word	0x2000000c
 800329c:	20000010 	.word	0x20000010
 80032a0:	20000004 	.word	0x20000004
 80032a4:	2000f480 	.word	0x2000f480
 80032a8:	2000f4c0 	.word	0x2000f4c0
 80032ac:	0001fffe 	.word	0x0001fffe

080032b0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80032b4:	f7ff ff7c 	bl	80031b0 <Audio_MAL_IRQHandler>
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80032c0:	f7ff ff76 	bl	80031b0 <Audio_MAL_IRQHandler>
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80032cc:	2102      	movs	r1, #2
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <SPI3_IRQHandler+0x3c>)
 80032d0:	f7ff ff51 	bl	8003176 <SPI_I2S_GetFlagStatus>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d011      	beq.n	80032fe <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <SPI3_IRQHandler+0x40>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d106      	bne.n	80032f0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80032e2:	f000 fe34 	bl	8003f4e <EVAL_AUDIO_GetSampleCallBack>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4619      	mov	r1, r3
 80032ea:	2004      	movs	r0, #4
 80032ec:	f7ff fe22 	bl	8002f34 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80032f0:	f000 fe2d 	bl	8003f4e <EVAL_AUDIO_GetSampleCallBack>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4619      	mov	r1, r3
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <SPI3_IRQHandler+0x3c>)
 80032fa:	f7ff ff2d 	bl	8003158 <SPI_I2S_SendData>
  }
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40003c00 	.word	0x40003c00
 8003308:	20000008 	.word	0x20000008

0800330c <AperiodicTaskCreator>:
#include <Creator.h>

/*
 * Creates an aperiodic task to be injected into the deadline-driven scheduler.
 */
void AperiodicTaskCreator( void *pvParameters ) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	while(1) {
	        TickType_t taskDeadline = aperiodicTaskDeadline;
 8003314:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003318:	617b      	str	r3, [r7, #20]
	        TickType_t curTime = xTaskGetTickCount();
 800331a:	f7fe fe47 	bl	8001fac <xTaskGetTickCount>
 800331e:	6138      	str	r0, [r7, #16]

	        ddTaskHandle newTask = Init_DD_Task();
 8003320:	f000 fb12 	bl	8003948 <Init_DD_Task>
 8003324:	60f8      	str	r0, [r7, #12]
	        newTask->name = "Aperiodic Task";
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <AperiodicTaskCreator+0x54>)
 800332a:	60da      	str	r2, [r3, #12]
	        newTask->number = 4;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2204      	movs	r2, #4
 8003330:	615a      	str	r2, [r3, #20]
	        newTask->type = Aperiodic;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	        newTask->function = AperiodicTask;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a09      	ldr	r2, [pc, #36]	; (8003364 <AperiodicTaskCreator+0x58>)
 800333e:	605a      	str	r2, [r3, #4]
	        newTask->startTime = curTime;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	61da      	str	r2, [r3, #28]
	        newTask->deadline = taskDeadline + curTime;
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	441a      	add	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]

	        Create_DD_Task(newTask);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 ff85 	bl	8004260 <Create_DD_Task>
	        vTaskDelay(portMAX_DELAY);
 8003356:	f04f 30ff 	mov.w	r0, #4294967295
 800335a:	f7fe fb17 	bl	800198c <vTaskDelay>
	while(1) {
 800335e:	e7d9      	b.n	8003314 <AperiodicTaskCreator+0x8>
 8003360:	08004e28 	.word	0x08004e28
 8003364:	08003369 	.word	0x08003369

08003368 <AperiodicTask>:
}

/*
 * Runs the aperiodic task when the scheduler releases it.
 */
void AperiodicTask (void *pvParameters) {
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b08b      	sub	sp, #44	; 0x2c
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	bool overdueFlag = false;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ddTaskHandle this = (ddTaskHandle)pvParameters;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	61bb      	str	r3, [r7, #24]
	TickType_t curTime = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
	TickType_t prevTime = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
	TickType_t executionTime = aperiodicTaskDuration / portTICK_PERIOD_MS;
 8003382:	2396      	movs	r3, #150	; 0x96
 8003384:	617b      	str	r3, [r7, #20]
	TickType_t timeLeft = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]

    while(1) {
    	// Task is released
    	curTime = xTaskGetTickCount();
 800338a:	f7fe fe0f 	bl	8001fac <xTaskGetTickCount>
 800338e:	4603      	mov	r3, r0
 8003390:	60bb      	str	r3, [r7, #8]
    	prevTime = curTime;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	623b      	str	r3, [r7, #32]
        TickType_t curMod = curTime % 5;
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4b39      	ldr	r3, [pc, #228]	; (8003480 <AperiodicTask+0x118>)
 800339a:	fba3 1302 	umull	r1, r3, r3, r2
 800339e:	0899      	lsrs	r1, r3, #2
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <AperiodicTask+0x50>
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	60bb      	str	r3, [r7, #8]
    	printf("\nAperiodic Task released at %u ms with priority %u\n", (unsigned int)curTime, (unsigned int)uxTaskPriorityGet( NULL ) );
 80033b8:	68bc      	ldr	r4, [r7, #8]
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fe fb1a 	bl	80019f4 <uxTaskPriorityGet>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4621      	mov	r1, r4
 80033c6:	482f      	ldr	r0, [pc, #188]	; (8003484 <AperiodicTask+0x11c>)
 80033c8:	f001 fc7e 	bl	8004cc8 <printf>

    	// Execute the task for its pre-set duration
        for(int i = 0; i < executionTime; i++) {
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e018      	b.n	8003404 <AperiodicTask+0x9c>
        	if(this->deadline < curTime) {
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d203      	bcs.n	80033e4 <AperiodicTask+0x7c>
				overdueFlag = true;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80033e2:	e013      	b.n	800340c <AperiodicTask+0xa4>
			}
			curTime = xTaskGetTickCount();
 80033e4:	f7fe fde2 	bl	8001fac <xTaskGetTickCount>
 80033e8:	4603      	mov	r3, r0
 80033ea:	60bb      	str	r3, [r7, #8]
			if(curTime == prevTime) i--;
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d102      	bne.n	80033fa <AperiodicTask+0x92>
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
			prevTime = curTime;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	623b      	str	r3, [r7, #32]
        for(int i = 0; i < executionTime; i++) {
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	d3e2      	bcc.n	80033d2 <AperiodicTask+0x6a>
		}

        curTime = xTaskGetTickCount();
 800340c:	f7fe fdce 	bl	8001fac <xTaskGetTickCount>
 8003410:	4603      	mov	r3, r0
 8003412:	60bb      	str	r3, [r7, #8]
        curMod = curTime % 5;
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <AperiodicTask+0x118>)
 8003418:	fba3 1302 	umull	r1, r3, r3, r2
 800341c:	0899      	lsrs	r1, r3, #2
 800341e:	460b      	mov	r3, r1
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <AperiodicTask+0xce>
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	60bb      	str	r3, [r7, #8]
    	if(overdueFlag == false) {
 8003436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <AperiodicTask+0xe8>
    		printf("\nAperiodic task completed at %u ms", (unsigned int)curTime);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4619      	mov	r1, r3
 8003448:	480f      	ldr	r0, [pc, #60]	; (8003488 <AperiodicTask+0x120>)
 800344a:	f001 fc3d 	bl	8004cc8 <printf>
 800344e:	e004      	b.n	800345a <AperiodicTask+0xf2>
    	} else {
    		printf("\nAperiodic task overdue at %u ms", (unsigned int)curTime);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4619      	mov	r1, r3
 8003454:	480d      	ldr	r0, [pc, #52]	; (800348c <AperiodicTask+0x124>)
 8003456:	f001 fc37 	bl	8004cc8 <printf>
    	}

        // Pause the task until its deadline
        timeLeft = this->deadline - curTime;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	613b      	str	r3, [r7, #16]
        vTaskDelayUntil(&curTime, timeLeft);
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	6939      	ldr	r1, [r7, #16]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fa14 	bl	8001898 <vTaskDelayUntil>

        Delete_DD_Task(xTaskGetCurrentTaskHandle(), 'A');
 8003470:	f7ff f8f2 	bl	8002658 <xTaskGetCurrentTaskHandle>
 8003474:	4603      	mov	r3, r0
 8003476:	2141      	movs	r1, #65	; 0x41
 8003478:	4618      	mov	r0, r3
 800347a:	f000 ff89 	bl	8004390 <Delete_DD_Task>
    while(1) {
 800347e:	e784      	b.n	800338a <AperiodicTask+0x22>
 8003480:	cccccccd 	.word	0xcccccccd
 8003484:	08004e38 	.word	0x08004e38
 8003488:	08004e6c 	.word	0x08004e6c
 800348c:	08004e90 	.word	0x08004e90

08003490 <PeriodicTaskCreator1>:
}

/*
 * Creates the 1st periodic task to be injected into the deadline-driven scheduler.
 */
void PeriodicTaskCreator1(void *pvParameters) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    while(1) {
        TickType_t taskDeadline = periodicTask1Period;
 8003498:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800349c:	617b      	str	r3, [r7, #20]
        TickType_t curTime = xTaskGetTickCount();
 800349e:	f7fe fd85 	bl	8001fac <xTaskGetTickCount>
 80034a2:	6138      	str	r0, [r7, #16]

        ddTaskHandle newTask = Init_DD_Task();
 80034a4:	f000 fa50 	bl	8003948 <Init_DD_Task>
 80034a8:	60f8      	str	r0, [r7, #12]
        newTask->name = "Periodic Task 1";
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <PeriodicTaskCreator1+0x54>)
 80034ae:	60da      	str	r2, [r3, #12]
        newTask->number = 1;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
        newTask->type = Periodic;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        newTask->function = PeriodicTask1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <PeriodicTaskCreator1+0x58>)
 80034c2:	605a      	str	r2, [r3, #4]
        newTask->startTime = curTime;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	61da      	str	r2, [r3, #28]
        newTask->deadline = taskDeadline + curTime;
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	441a      	add	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

        Create_DD_Task(newTask);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fec3 	bl	8004260 <Create_DD_Task>
        vTaskDelay(periodicTask1Period);
 80034da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034de:	f7fe fa55 	bl	800198c <vTaskDelay>
    while(1) {
 80034e2:	e7d9      	b.n	8003498 <PeriodicTaskCreator1+0x8>
 80034e4:	08004eb4 	.word	0x08004eb4
 80034e8:	080035a5 	.word	0x080035a5

080034ec <PeriodicTaskCreator2>:
}

/*
 * Creates the 2nd periodic task to be injected into the deadline-driven scheduler.
 */
void PeriodicTaskCreator2(void *pvParameters) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    while(1) {
        TickType_t taskDeadline = periodicTask2Period;
 80034f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034f8:	617b      	str	r3, [r7, #20]
        TickType_t curTime = xTaskGetTickCount();
 80034fa:	f7fe fd57 	bl	8001fac <xTaskGetTickCount>
 80034fe:	6138      	str	r0, [r7, #16]

        ddTaskHandle newTask = Init_DD_Task();
 8003500:	f000 fa22 	bl	8003948 <Init_DD_Task>
 8003504:	60f8      	str	r0, [r7, #12]
        newTask->name = "Periodic Task 2";
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <PeriodicTaskCreator2+0x54>)
 800350a:	60da      	str	r2, [r3, #12]
        newTask->number = 2;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2202      	movs	r2, #2
 8003510:	615a      	str	r2, [r3, #20]
        newTask->type = Periodic;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        newTask->function = PeriodicTask2;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a09      	ldr	r2, [pc, #36]	; (8003544 <PeriodicTaskCreator2+0x58>)
 800351e:	605a      	str	r2, [r3, #4]
        newTask->startTime = curTime;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	61da      	str	r2, [r3, #28]
        newTask->deadline = taskDeadline + curTime;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

        Create_DD_Task(newTask);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fe95 	bl	8004260 <Create_DD_Task>
        vTaskDelay(periodicTask2Period);
 8003536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800353a:	f7fe fa27 	bl	800198c <vTaskDelay>
    while(1) {
 800353e:	e7d9      	b.n	80034f4 <PeriodicTaskCreator2+0x8>
 8003540:	08004ec4 	.word	0x08004ec4
 8003544:	080036cd 	.word	0x080036cd

08003548 <PeriodicTaskCreator3>:
}

/*
 * Creates the 3rd periodic task to be injected into the deadline-driven scheduler.
 */
void PeriodicTaskCreator3(void *pvParameters) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    while(1) {
        TickType_t taskDeadline = periodicTask3Period;
 8003550:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003554:	617b      	str	r3, [r7, #20]
        TickType_t curTime = xTaskGetTickCount();
 8003556:	f7fe fd29 	bl	8001fac <xTaskGetTickCount>
 800355a:	6138      	str	r0, [r7, #16]

        ddTaskHandle newTask = Init_DD_Task();
 800355c:	f000 f9f4 	bl	8003948 <Init_DD_Task>
 8003560:	60f8      	str	r0, [r7, #12]
        newTask->name = "Periodic Task 3";
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <PeriodicTaskCreator3+0x54>)
 8003566:	60da      	str	r2, [r3, #12]
        newTask->number = 3;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2203      	movs	r2, #3
 800356c:	615a      	str	r2, [r3, #20]
        newTask->type = Periodic;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        newTask->function = PeriodicTask3;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <PeriodicTaskCreator3+0x58>)
 800357a:	605a      	str	r2, [r3, #4]
        newTask->startTime = curTime;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	61da      	str	r2, [r3, #28]
        newTask->deadline = taskDeadline + curTime;
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	441a      	add	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

        Create_DD_Task(newTask);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fe67 	bl	8004260 <Create_DD_Task>
        vTaskDelay(periodicTask3Period);
 8003592:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003596:	f7fe f9f9 	bl	800198c <vTaskDelay>
    while(1) {
 800359a:	e7d9      	b.n	8003550 <PeriodicTaskCreator3+0x8>
 800359c:	08004ed4 	.word	0x08004ed4
 80035a0:	080037f5 	.word	0x080037f5

080035a4 <PeriodicTask1>:
}

/*
 * Runs the 1st periodic task when the scheduler releases it.
 */
void PeriodicTask1(void *pvParameters) {
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b08b      	sub	sp, #44	; 0x2c
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	bool overdueFlag = false;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ddTaskHandle this = (ddTaskHandle)pvParameters;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	617b      	str	r3, [r7, #20]
	TickType_t curTime, prevTime, timeLeft = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
	TickType_t executionTime = periodicTask1Duration / portTICK_PERIOD_MS;
 80035ba:	235f      	movs	r3, #95	; 0x5f
 80035bc:	613b      	str	r3, [r7, #16]

    while(1) {
        if(timeLeft != 0) vTaskDelayUntil(&curTime, timeLeft);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <PeriodicTask1+0x2c>
 80035c4:	f107 0308 	add.w	r3, r7, #8
 80035c8:	69f9      	ldr	r1, [r7, #28]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f964 	bl	8001898 <vTaskDelayUntil>
    	// Release the task
    	curTime = xTaskGetTickCount();
 80035d0:	f7fe fcec 	bl	8001fac <xTaskGetTickCount>
 80035d4:	4603      	mov	r3, r0
 80035d6:	60bb      	str	r3, [r7, #8]
    	prevTime = curTime;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	623b      	str	r3, [r7, #32]
        TickType_t curMod = curTime % 5;
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <PeriodicTask1+0x118>)
 80035e0:	fba3 1302 	umull	r1, r3, r3, r2
 80035e4:	0899      	lsrs	r1, r3, #2
 80035e6:	460b      	mov	r3, r1
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <PeriodicTask1+0x5a>
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	60bb      	str	r3, [r7, #8]
    	printf("\nPeriodic Task 1 released at %u ms with priority %u", (unsigned int)curTime, (unsigned int)uxTaskPriorityGet( NULL ) );
 80035fe:	68bc      	ldr	r4, [r7, #8]
 8003600:	2000      	movs	r0, #0
 8003602:	f7fe f9f7 	bl	80019f4 <uxTaskPriorityGet>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	4621      	mov	r1, r4
 800360c:	482c      	ldr	r0, [pc, #176]	; (80036c0 <PeriodicTask1+0x11c>)
 800360e:	f001 fb5b 	bl	8004cc8 <printf>

    	// Execute the task for its pre-set duration
        for(int i = 0; i < executionTime; i++) {
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e018      	b.n	800364a <PeriodicTask1+0xa6>
        	if(this->deadline < curTime) {
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d203      	bcs.n	800362a <PeriodicTask1+0x86>
				overdueFlag = true;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8003628:	e013      	b.n	8003652 <PeriodicTask1+0xae>
			}
        	curTime = xTaskGetTickCount();
 800362a:	f7fe fcbf 	bl	8001fac <xTaskGetTickCount>
 800362e:	4603      	mov	r3, r0
 8003630:	60bb      	str	r3, [r7, #8]
			if( curTime == prevTime ) i--;
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	429a      	cmp	r2, r3
 8003638:	d102      	bne.n	8003640 <PeriodicTask1+0x9c>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	3b01      	subs	r3, #1
 800363e:	61bb      	str	r3, [r7, #24]
			prevTime = curTime;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	623b      	str	r3, [r7, #32]
        for(int i = 0; i < executionTime; i++) {
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	3301      	adds	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d3e2      	bcc.n	8003618 <PeriodicTask1+0x74>
        }
        curTime = xTaskGetTickCount();
 8003652:	f7fe fcab 	bl	8001fac <xTaskGetTickCount>
 8003656:	4603      	mov	r3, r0
 8003658:	60bb      	str	r3, [r7, #8]
        curMod = curTime % 5;
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <PeriodicTask1+0x118>)
 800365e:	fba3 1302 	umull	r1, r3, r3, r2
 8003662:	0899      	lsrs	r1, r3, #2
 8003664:	460b      	mov	r3, r1
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <PeriodicTask1+0xd8>
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	60bb      	str	r3, [r7, #8]
    	if(overdueFlag == false) {
 800367c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <PeriodicTask1+0xf2>
    		printf("\nPeriodic Task 1 completed at %u ms", (unsigned int)curTime);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4619      	mov	r1, r3
 800368e:	480d      	ldr	r0, [pc, #52]	; (80036c4 <PeriodicTask1+0x120>)
 8003690:	f001 fb1a 	bl	8004cc8 <printf>
 8003694:	e004      	b.n	80036a0 <PeriodicTask1+0xfc>
		} else {
			printf("\nPeriodic Task 1 overdue at %u ms", (unsigned int)curTime);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4619      	mov	r1, r3
 800369a:	480b      	ldr	r0, [pc, #44]	; (80036c8 <PeriodicTask1+0x124>)
 800369c:	f001 fb14 	bl	8004cc8 <printf>
		}

		// Delay the next iteration of the task until the next period
        timeLeft = this->deadline - curTime;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	61fb      	str	r3, [r7, #28]
        //if(timeLeft != 0) vTaskDelayUntil(&curTime, timeLeft);
        Delete_DD_Task(xTaskGetCurrentTaskHandle(), '1');
 80036aa:	f7fe ffd5 	bl	8002658 <xTaskGetCurrentTaskHandle>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2131      	movs	r1, #49	; 0x31
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fe6c 	bl	8004390 <Delete_DD_Task>
    while(1) {
 80036b8:	e781      	b.n	80035be <PeriodicTask1+0x1a>
 80036ba:	bf00      	nop
 80036bc:	cccccccd 	.word	0xcccccccd
 80036c0:	08004ee4 	.word	0x08004ee4
 80036c4:	08004f18 	.word	0x08004f18
 80036c8:	08004f3c 	.word	0x08004f3c

080036cc <PeriodicTask2>:
}

/*
 * Runs the 2nd periodic task when the scheduler releases it.
 */
void PeriodicTask2(void *pvParameters) {
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b08b      	sub	sp, #44	; 0x2c
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	bool overdueFlag = false;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ddTaskHandle this = (ddTaskHandle)pvParameters;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	617b      	str	r3, [r7, #20]
	TickType_t curTime, prevTime, timeLeft = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
	TickType_t executionTime = periodicTask2Duration / portTICK_PERIOD_MS;
 80036e2:	2396      	movs	r3, #150	; 0x96
 80036e4:	613b      	str	r3, [r7, #16]

    while(1) {
        if(timeLeft != 0) vTaskDelayUntil(&curTime, timeLeft);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <PeriodicTask2+0x2c>
 80036ec:	f107 0308 	add.w	r3, r7, #8
 80036f0:	69f9      	ldr	r1, [r7, #28]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe f8d0 	bl	8001898 <vTaskDelayUntil>
    	// Release the task
    	curTime = xTaskGetTickCount();
 80036f8:	f7fe fc58 	bl	8001fac <xTaskGetTickCount>
 80036fc:	4603      	mov	r3, r0
 80036fe:	60bb      	str	r3, [r7, #8]
    	prevTime = curTime;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	623b      	str	r3, [r7, #32]
        TickType_t curMod = curTime % 5;
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <PeriodicTask2+0x118>)
 8003708:	fba3 1302 	umull	r1, r3, r3, r2
 800370c:	0899      	lsrs	r1, r3, #2
 800370e:	460b      	mov	r3, r1
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <PeriodicTask2+0x5a>
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	60bb      	str	r3, [r7, #8]
    	printf("\nPeriodic Task 2 released at %u ms with priority %u", (unsigned int)curTime, (unsigned int)uxTaskPriorityGet(NULL));
 8003726:	68bc      	ldr	r4, [r7, #8]
 8003728:	2000      	movs	r0, #0
 800372a:	f7fe f963 	bl	80019f4 <uxTaskPriorityGet>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	4621      	mov	r1, r4
 8003734:	482c      	ldr	r0, [pc, #176]	; (80037e8 <PeriodicTask2+0x11c>)
 8003736:	f001 fac7 	bl	8004cc8 <printf>

    	// Execute the task for its pre-set duration
        for(int i = 0; i < executionTime; i++) {
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e018      	b.n	8003772 <PeriodicTask2+0xa6>
			if(this->deadline < curTime) {
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d203      	bcs.n	8003752 <PeriodicTask2+0x86>
				overdueFlag = true;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8003750:	e013      	b.n	800377a <PeriodicTask2+0xae>
			}
        	curTime = xTaskGetTickCount();
 8003752:	f7fe fc2b 	bl	8001fac <xTaskGetTickCount>
 8003756:	4603      	mov	r3, r0
 8003758:	60bb      	str	r3, [r7, #8]
			if( curTime == prevTime ) i--;
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	429a      	cmp	r2, r3
 8003760:	d102      	bne.n	8003768 <PeriodicTask2+0x9c>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3b01      	subs	r3, #1
 8003766:	61bb      	str	r3, [r7, #24]
			prevTime = curTime;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	623b      	str	r3, [r7, #32]
        for(int i = 0; i < executionTime; i++) {
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	3301      	adds	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3e2      	bcc.n	8003740 <PeriodicTask2+0x74>
        }
        curTime = xTaskGetTickCount();
 800377a:	f7fe fc17 	bl	8001fac <xTaskGetTickCount>
 800377e:	4603      	mov	r3, r0
 8003780:	60bb      	str	r3, [r7, #8]
        curMod = curTime % 5;
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <PeriodicTask2+0x118>)
 8003786:	fba3 1302 	umull	r1, r3, r3, r2
 800378a:	0899      	lsrs	r1, r3, #2
 800378c:	460b      	mov	r3, r1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <PeriodicTask2+0xd8>
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	60bb      	str	r3, [r7, #8]
    	if(overdueFlag == false) {
 80037a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <PeriodicTask2+0xf2>
			printf("\nPeriodic Task 2 completed at %u ms", (unsigned int)curTime);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4619      	mov	r1, r3
 80037b6:	480d      	ldr	r0, [pc, #52]	; (80037ec <PeriodicTask2+0x120>)
 80037b8:	f001 fa86 	bl	8004cc8 <printf>
 80037bc:	e004      	b.n	80037c8 <PeriodicTask2+0xfc>
		} else {
			printf("\nPeriodic Task 2 overdue at %u ms", (unsigned int)curTime);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4619      	mov	r1, r3
 80037c2:	480b      	ldr	r0, [pc, #44]	; (80037f0 <PeriodicTask2+0x124>)
 80037c4:	f001 fa80 	bl	8004cc8 <printf>
		}

        // Delay the next iteration of the task until the next period
        timeLeft = this->deadline - curTime;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	61fb      	str	r3, [r7, #28]
        //if(timeLeft != 0) vTaskDelayUntil(&curTime, timeLeft);
        Delete_DD_Task(xTaskGetCurrentTaskHandle(), '2');
 80037d2:	f7fe ff41 	bl	8002658 <xTaskGetCurrentTaskHandle>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2132      	movs	r1, #50	; 0x32
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fdd8 	bl	8004390 <Delete_DD_Task>
    while(1) {
 80037e0:	e781      	b.n	80036e6 <PeriodicTask2+0x1a>
 80037e2:	bf00      	nop
 80037e4:	cccccccd 	.word	0xcccccccd
 80037e8:	08004f60 	.word	0x08004f60
 80037ec:	08004f94 	.word	0x08004f94
 80037f0:	08004fb8 	.word	0x08004fb8

080037f4 <PeriodicTask3>:


/*
 * Runs the 3rd periodic task when the scheduler releases it.
 */
void PeriodicTask3(void *pvParameters) {
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b08b      	sub	sp, #44	; 0x2c
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	bool overdueFlag = false;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ddTaskHandle this = (ddTaskHandle)pvParameters;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	617b      	str	r3, [r7, #20]
	TickType_t curTime, prevTime, timeLeft = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
	TickType_t executionTime = periodicTask3Duration / portTICK_PERIOD_MS;
 800380a:	23fa      	movs	r3, #250	; 0xfa
 800380c:	613b      	str	r3, [r7, #16]

    while(1) {
        if(timeLeft != 0) vTaskDelayUntil(&curTime, timeLeft);
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <PeriodicTask3+0x2c>
 8003814:	f107 0308 	add.w	r3, r7, #8
 8003818:	69f9      	ldr	r1, [r7, #28]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe f83c 	bl	8001898 <vTaskDelayUntil>
    	// Release the task
    	curTime = xTaskGetTickCount();
 8003820:	f7fe fbc4 	bl	8001fac <xTaskGetTickCount>
 8003824:	4603      	mov	r3, r0
 8003826:	60bb      	str	r3, [r7, #8]
    	prevTime = curTime;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	623b      	str	r3, [r7, #32]
        TickType_t curMod = curTime % 5;
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	4b37      	ldr	r3, [pc, #220]	; (800390c <PeriodicTask3+0x118>)
 8003830:	fba3 1302 	umull	r1, r3, r3, r2
 8003834:	0899      	lsrs	r1, r3, #2
 8003836:	460b      	mov	r3, r1
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <PeriodicTask3+0x5a>
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	60bb      	str	r3, [r7, #8]
    	printf("\nPeriodic Task 3 released at %u ms with priority %u", (unsigned int)curTime, (unsigned int)uxTaskPriorityGet( NULL ) );
 800384e:	68bc      	ldr	r4, [r7, #8]
 8003850:	2000      	movs	r0, #0
 8003852:	f7fe f8cf 	bl	80019f4 <uxTaskPriorityGet>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4621      	mov	r1, r4
 800385c:	482c      	ldr	r0, [pc, #176]	; (8003910 <PeriodicTask3+0x11c>)
 800385e:	f001 fa33 	bl	8004cc8 <printf>

    	// Execute the task for its pre-set duration
        for(int i = 0; i < executionTime; i++) {
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e018      	b.n	800389a <PeriodicTask3+0xa6>
        	if(this->deadline < curTime) {
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	d203      	bcs.n	800387a <PeriodicTask3+0x86>
				overdueFlag = true;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8003878:	e013      	b.n	80038a2 <PeriodicTask3+0xae>
			}
        	curTime = xTaskGetTickCount();
 800387a:	f7fe fb97 	bl	8001fac <xTaskGetTickCount>
 800387e:	4603      	mov	r3, r0
 8003880:	60bb      	str	r3, [r7, #8]
			if(curTime == prevTime) i--;
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	429a      	cmp	r2, r3
 8003888:	d102      	bne.n	8003890 <PeriodicTask3+0x9c>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	3b01      	subs	r3, #1
 800388e:	61bb      	str	r3, [r7, #24]
			prevTime = curTime;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	623b      	str	r3, [r7, #32]
        for(int i = 0; i < executionTime; i++) {
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	3301      	adds	r3, #1
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3e2      	bcc.n	8003868 <PeriodicTask3+0x74>
        }
        curTime = xTaskGetTickCount();
 80038a2:	f7fe fb83 	bl	8001fac <xTaskGetTickCount>
 80038a6:	4603      	mov	r3, r0
 80038a8:	60bb      	str	r3, [r7, #8]
        curMod = curTime % 5;
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <PeriodicTask3+0x118>)
 80038ae:	fba3 1302 	umull	r1, r3, r3, r2
 80038b2:	0899      	lsrs	r1, r3, #2
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	60fb      	str	r3, [r7, #12]
    	if(curMod != 0) curTime -= curMod;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <PeriodicTask3+0xd8>
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	60bb      	str	r3, [r7, #8]
    	if(overdueFlag == false) {
 80038cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038d0:	f083 0301 	eor.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <PeriodicTask3+0xf2>
			printf("\nPeriodic Task 3 completed at %u ms", (unsigned int)curTime);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4619      	mov	r1, r3
 80038de:	480d      	ldr	r0, [pc, #52]	; (8003914 <PeriodicTask3+0x120>)
 80038e0:	f001 f9f2 	bl	8004cc8 <printf>
 80038e4:	e004      	b.n	80038f0 <PeriodicTask3+0xfc>
		} else {
			printf("\nPeriodic Task 3 overdue at %u ms", (unsigned int)curTime);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4619      	mov	r1, r3
 80038ea:	480b      	ldr	r0, [pc, #44]	; (8003918 <PeriodicTask3+0x124>)
 80038ec:	f001 f9ec 	bl	8004cc8 <printf>
		}

		// Delay the next iteration of the task until the next period
        timeLeft = this->deadline - curTime;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	61fb      	str	r3, [r7, #28]
        Delete_DD_Task(xTaskGetCurrentTaskHandle(), '3');
 80038fa:	f7fe fead 	bl	8002658 <xTaskGetCurrentTaskHandle>
 80038fe:	4603      	mov	r3, r0
 8003900:	2133      	movs	r1, #51	; 0x33
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fd44 	bl	8004390 <Delete_DD_Task>
    while(1) {
 8003908:	e781      	b.n	800380e <PeriodicTask3+0x1a>
 800390a:	bf00      	nop
 800390c:	cccccccd 	.word	0xcccccccd
 8003910:	08004fdc 	.word	0x08004fdc
 8003914:	08005010 	.word	0x08005010
 8003918:	08005034 	.word	0x08005034

0800391c <vApplicationMallocFailedHook>:
#include "FreeRTOSHooks.h"

/*--------------------------- Application Hooks From Template File --------------------------------*/

void vApplicationMallocFailedHook( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
    Called if a call to pvPortMalloc() fails because there is insufficient
    free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    internally by FreeRTOS API functions that create tasks, queues, software
    timers, and semaphores.  The size of the FreeRTOS heap is set by the
    configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
    for( ;; );
 8003920:	e7fe      	b.n	8003920 <vApplicationMallocFailedHook+0x4>

08003922 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
    /* Run time stack overflow checking is performed if
    configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    function is called if a stack overflow is detected.  pxCurrentTCB can be
    inspected in the debugger if the task name passed into this function is
    corrupt. */
    for( ;; );
 800392c:	e7fe      	b.n	800392c <vApplicationStackOverflowHook+0xa>

0800392e <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
    FreeRTOSConfig.h.

    This function is called on each cycle of the idle task.  In this case it
    does nothing useful, other than report the amount of FreeRTOS heap that
    remains unallocated. */
    xFreeStackSpace = xPortGetFreeHeapSize();
 8003934:	f7fd f832 	bl	800099c <xPortGetFreeHeapSize>
 8003938:	4603      	mov	r3, r0
 800393a:	607b      	str	r3, [r7, #4]

    if( xFreeStackSpace > 100 )
 800393c:	687b      	ldr	r3, [r7, #4]
        /* By now, the kernel has allocated everything it is going to, so
        if there is a lot of heap remaining unallocated then
        the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
        reduced accordingly. */
    }
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <Init_DD_Task>:
#include <List.h>

/*
 * Mallocs/initializes a deadline driven task struct
 */
ddTaskHandle Init_DD_Task() {
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
	ddTaskHandle newtask = (ddTaskHandle)pvPortMalloc(sizeof(ddTask_t));
 800394e:	2028      	movs	r0, #40	; 0x28
 8003950:	f7fc ff06 	bl	8000760 <pvPortMalloc>
 8003954:	6078      	str	r0, [r7, #4]

    newtask->deadline = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
    newtask->function = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	605a      	str	r2, [r3, #4]
    newtask->handle = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
    newtask->name = "";
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <Init_DD_Task+0x58>)
 800396c:	60da      	str	r2, [r3, #12]
    newtask->number = -1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	615a      	str	r2, [r3, #20]
    newtask->next = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
    newtask->previous = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
    newtask->startTime = 0;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	61da      	str	r2, [r3, #28]
    newtask->timer = NULL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	621a      	str	r2, [r3, #32]
    newtask->type = NoType;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return newtask;
 8003996:	687b      	ldr	r3, [r7, #4]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	08005058 	.word	0x08005058

080039a4 <Free_DD_Task>:

/*
 * Zeroes out a deadline-driven task struct and frees the associated memory.
 */
bool Free_DD_Task(ddTaskHandle task) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	// Catch bad inputs
	if( task == NULL || task->next != NULL || task->previous != NULL) return false;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <Free_DD_Task+0x1e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <Free_DD_Task+0x1e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <Free_DD_Task+0x22>
 80039c2:	2300      	movs	r3, #0
 80039c4:	e023      	b.n	8003a0e <Free_DD_Task+0x6a>

	task->deadline = 0;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
    task->function = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
	task->handle = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
    task->name = "";
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <Free_DD_Task+0x74>)
 80039dc:	60da      	str	r2, [r3, #12]
    task->number = -1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	615a      	str	r2, [r3, #20]
    task->next = NULL;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
    task->previous = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	619a      	str	r2, [r3, #24]
    task->startTime = 0;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	61da      	str	r2, [r3, #28]
    task->timer = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	621a      	str	r2, [r3, #32]
    task->type = NoType;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    vPortFree((void*)task);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fc ff70 	bl	80008ec <vPortFree>
    return true;
 8003a0c:	2301      	movs	r3, #1
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	08005058 	.word	0x08005058

08003a1c <Init_DD_TaskList>:

/*
 * Initialize a linked list for a deadline-driven task list
 */
void Init_DD_TaskList(ddListHandle list) {
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	// Confirm valid pointer
	if(list == NULL) return;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <Init_DD_TaskList+0x22>

    list->length = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
    list->head = NULL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
    list->tail = NULL;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	e000      	b.n	8003a40 <Init_DD_TaskList+0x24>
	if(list == NULL) return;
 8003a3e:	bf00      	nop
}
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <Insert_DD_Task>:

/*
 * Insert a deadline-driven task struct into the overdue or active list
 */
void Insert_DD_Task(ddTaskHandle task , ddListHandle list) {
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b088      	sub	sp, #32
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
	// Check input parameters are not NULL
	if(list == NULL || task == NULL) return;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80d8 	beq.w	8003c0c <Insert_DD_Task+0x1c2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80d4 	beq.w	8003c0c <Insert_DD_Task+0x1c2>

	// First task in the list, insert as the head and the tail
    if( list->length == 0 ) {
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10f      	bne.n	8003a8c <Insert_DD_Task+0x42>
        list->head = task;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	605a      	str	r2, [r3, #4]
        list->tail = task;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	609a      	str	r2, [r3, #8]
        list->length = 1;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
        vTaskPrioritySet(task->handle, BASE_DD_PRIORITY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2103      	movs	r1, #3
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd ffcf 	bl	8001a28 <vTaskPrioritySet>
        return;
 8003a8a:	e0c2      	b.n	8003c12 <Insert_DD_Task+0x1c8>
    }

    ddTaskHandle curTask = list->head;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	61fb      	str	r3, [r7, #28]
    uint32_t curPriority = uxTaskPriorityGet(curTask->handle);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd ffac 	bl	80019f4 <uxTaskPriorityGet>
 8003a9c:	61b8      	str	r0, [r7, #24]
    curPriority += 1;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61bb      	str	r3, [r7, #24]

    if(curPriority == GENERATOR_DD_PRIORITY) return; // FreeRTOS scheduler is full
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b1d      	cmp	r3, #29
 8003aa8:	f000 80b2 	beq.w	8003c10 <Insert_DD_Task+0x1c6>

    if(task->type == Aperiodic) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 80a6 	bne.w	8003c04 <Insert_DD_Task+0x1ba>
    	uint32_t tailPriority = uxTaskPriorityGet(list->tail->handle);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd ff98 	bl	80019f4 <uxTaskPriorityGet>
 8003ac4:	6178      	str	r0, [r7, #20]
    	vTaskPrioritySet(task->handle, tailPriority);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd ffab 	bl	8001a28 <vTaskPrioritySet>
    	list->tail->next = task;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]
    	list->tail = task;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
    	list->length += 1;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]
    	while(curTask->next != NULL) {
 8003aea:	e00b      	b.n	8003b04 <Insert_DD_Task+0xba>
    		vTaskPrioritySet(curTask->handle, curPriority);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd ff98 	bl	8001a28 <vTaskPrioritySet>
    		curPriority -= 1;
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	61bb      	str	r3, [r7, #24]
    		curTask = curTask->next;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	61fb      	str	r3, [r7, #28]
    	while(curTask->next != NULL) {
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ef      	bne.n	8003aec <Insert_DD_Task+0xa2>
    	}
    	return;
 8003b0c:	e081      	b.n	8003c12 <Insert_DD_Task+0x1c8>
    }

    // Iterate through the list starting at the head
    while(curTask != NULL){
    	bool equalButSmallerTaskNumber = (task->startTime == curTask->startTime) && (task->deadline == curTask->deadline) && (task->number < curTask->number);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d10d      	bne.n	8003b36 <Insert_DD_Task+0xec>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d107      	bne.n	8003b36 <Insert_DD_Task+0xec>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d201      	bcs.n	8003b36 <Insert_DD_Task+0xec>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <Insert_DD_Task+0xee>
 8003b36:	2300      	movs	r3, #0
 8003b38:	74fb      	strb	r3, [r7, #19]
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	74fb      	strb	r3, [r7, #19]

    	if(equalButSmallerTaskNumber){
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <Insert_DD_Task+0x102>
    		int i = 1;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
    	}

    	equalButSmallerTaskNumber = false;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	74fb      	strb	r3, [r7, #19]
        if(task->deadline < curTask->deadline || curTask->type == Aperiodic || equalButSmallerTaskNumber) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d307      	bcc.n	8003b6c <Insert_DD_Task+0x122>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <Insert_DD_Task+0x122>
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01d      	beq.n	8003ba8 <Insert_DD_Task+0x15e>
        	// Found the location in the list for the task, insert and return
            if(curTask == list->head){
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d102      	bne.n	8003b7c <Insert_DD_Task+0x132>
            	list->head = task;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]
            }

            task->next = curTask;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	611a      	str	r2, [r3, #16]
            task->previous = curTask->previous;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
            curTask->previous = task;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]

            list->length += 1;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	601a      	str	r2, [r3, #0]
            vTaskPrioritySet(task->handle, curPriority);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	69b9      	ldr	r1, [r7, #24]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd ff41 	bl	8001a28 <vTaskPrioritySet>
            return;
 8003ba6:	e034      	b.n	8003c12 <Insert_DD_Task+0x1c8>
        } else {
            if(curTask->next == NULL) {
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11d      	bne.n	8003bec <Insert_DD_Task+0x1a2>
            	// At the end of the list, insert the task as the tail and return
                list->tail = task;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]
                task->previous = curTask;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	619a      	str	r2, [r3, #24]
                task->next = NULL;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
                curTask->next = task;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	611a      	str	r2, [r3, #16]

                list->length += 1;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	601a      	str	r2, [r3, #0]
                vTaskPrioritySet(curTask->handle, curPriority);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd ff25 	bl	8001a28 <vTaskPrioritySet>
                vTaskPrioritySet(task->handle, BASE_DD_PRIORITY);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2103      	movs	r1, #3
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd ff1f 	bl	8001a28 <vTaskPrioritySet>
                return;
 8003bea:	e012      	b.n	8003c12 <Insert_DD_Task+0x1c8>
            }

            // Iterate to the next task in the list
            vTaskPrioritySet(curTask->handle, curPriority);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd ff18 	bl	8001a28 <vTaskPrioritySet>
            curTask = curTask->next;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	61fb      	str	r3, [r7, #28]
            curPriority -= 1;
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	61bb      	str	r3, [r7, #24]
    while(curTask != NULL){
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d181      	bne.n	8003b0e <Insert_DD_Task+0xc4>
 8003c0a:	e002      	b.n	8003c12 <Insert_DD_Task+0x1c8>
	if(list == NULL || task == NULL) return;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <Insert_DD_Task+0x1c8>
    if(curPriority == GENERATOR_DD_PRIORITY) return; // FreeRTOS scheduler is full
 8003c10:	bf00      	nop
        }
    }
}
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <Remove_DD_TaskList>:


/*
 * Remove a deadline-driven task from a task list
 */
void Remove_DD_TaskList(TaskHandle_t task, ddListHandle list, bool transfer, bool trim) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	4611      	mov	r1, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	460b      	mov	r3, r1
 8003c28:	71fb      	strb	r3, [r7, #7]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	71bb      	strb	r3, [r7, #6]
	// Catch bad inputs
	if((task == NULL && !trim) || list == NULL || list->length == 0) return;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <Remove_DD_TaskList+0x2a>
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	f083 0301 	eor.w	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 80ad 	bne.w	8003d9c <Remove_DD_TaskList+0x184>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a9 	beq.w	8003d9c <Remove_DD_TaskList+0x184>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80a4 	beq.w	8003d9c <Remove_DD_TaskList+0x184>

	ddTaskHandle curTask = list->head;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	617b      	str	r3, [r7, #20]
    uint32_t curPriority = uxTaskPriorityGet(curTask->handle);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd fec8 	bl	80019f4 <uxTaskPriorityGet>
 8003c64:	6138      	str	r0, [r7, #16]

    // If the list has only one element that is the task to remove, zero-out the list
    if(list->length == 1 && (curTask->handle == task || trim)) {
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d11b      	bne.n	8003ca6 <Remove_DD_TaskList+0x8e>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d002      	beq.n	8003c7e <Remove_DD_TaskList+0x66>
 8003c78:	79bb      	ldrb	r3, [r7, #6]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d013      	beq.n	8003ca6 <Remove_DD_TaskList+0x8e>
		list->length = 0;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
    	list->head = NULL;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	605a      	str	r2, [r3, #4]
		list->tail = NULL;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
		if(!transfer) Free_DD_Task(curTask);
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8081 	beq.w	8003da0 <Remove_DD_TaskList+0x188>
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7ff fe80 	bl	80039a4 <Free_DD_Task>
		return;
 8003ca4:	e07c      	b.n	8003da0 <Remove_DD_TaskList+0x188>
	}

    // If we're trimming down the size of the overdue list, just remove the head
    if(trim) {
 8003ca6:	79bb      	ldrb	r3, [r7, #6]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05e      	beq.n	8003d6a <Remove_DD_TaskList+0x152>
    	list->head = curTask->next;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	605a      	str	r2, [r3, #4]
    	curTask->next->previous = NULL;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]
    	(list->length)--;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	601a      	str	r2, [r3, #0]
    	curTask->previous = NULL;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
    	curTask->next = NULL;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
    	Free_DD_Task(curTask);
 8003cd2:	6978      	ldr	r0, [r7, #20]
 8003cd4:	f7ff fe66 	bl	80039a4 <Free_DD_Task>
    	return;
 8003cd8:	e065      	b.n	8003da6 <Remove_DD_TaskList+0x18e>
    }

    while(curTask != NULL) {
        if(curTask->handle == task) {
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d136      	bne.n	8003d52 <Remove_DD_TaskList+0x13a>

            // Remove the task from the list (specific cases for head and tail)
            if(list->tail->handle == task) {
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d108      	bne.n	8003d02 <Remove_DD_TaskList+0xea>
                list->head = curTask->previous;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	605a      	str	r2, [r3, #4]
                curTask->previous->next = NULL;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
 8003d00:	e018      	b.n	8003d34 <Remove_DD_TaskList+0x11c>
            } else if(list->head->handle == task) {
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d108      	bne.n	8003d20 <Remove_DD_TaskList+0x108>
            	list->head = curTask->next;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	605a      	str	r2, [r3, #4]
            	curTask->next->previous = NULL;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	619a      	str	r2, [r3, #24]
 8003d1e:	e009      	b.n	8003d34 <Remove_DD_TaskList+0x11c>
            } else {
                curTask->previous->next = curTask->next;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6912      	ldr	r2, [r2, #16]
 8003d28:	611a      	str	r2, [r3, #16]
                curTask->next->previous = curTask->previous;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	6992      	ldr	r2, [r2, #24]
 8003d32:	619a      	str	r2, [r3, #24]
            }

            // Decrement the list size and free the task itself
            list->length -= 1;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	601a      	str	r2, [r3, #0]
            if(!transfer) Free_DD_Task(curTask);
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f083 0301 	eor.w	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02c      	beq.n	8003da4 <Remove_DD_TaskList+0x18c>
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7ff fe2a 	bl	80039a4 <Free_DD_Task>
            return;
 8003d50:	e028      	b.n	8003da4 <Remove_DD_TaskList+0x18c>
        } else {
        	// Iterate to the next task in the list
			curPriority--;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]
			vTaskPrioritySet(curTask->handle, curPriority);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	6939      	ldr	r1, [r7, #16]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fd fe62 	bl	8001a28 <vTaskPrioritySet>
			curTask = curTask->next;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	617b      	str	r3, [r7, #20]
    while(curTask != NULL) {
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1b4      	bne.n	8003cda <Remove_DD_TaskList+0xc2>
        }
    }

    // Reset all priorities if task not in list
    curTask = list->tail;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	617b      	str	r3, [r7, #20]
    curPriority = BASE_DD_PRIORITY;
 8003d76:	2303      	movs	r3, #3
 8003d78:	613b      	str	r3, [r7, #16]
    while(curTask != NULL) {
 8003d7a:	e00b      	b.n	8003d94 <Remove_DD_TaskList+0x17c>
        vTaskPrioritySet(curTask->handle, curPriority);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	6939      	ldr	r1, [r7, #16]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fe50 	bl	8001a28 <vTaskPrioritySet>
        curTask = curTask->previous;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	617b      	str	r3, [r7, #20]
        curPriority++;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3301      	adds	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
    while(curTask != NULL) {
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <Remove_DD_TaskList+0x164>
 8003d9a:	e004      	b.n	8003da6 <Remove_DD_TaskList+0x18e>
	if((task == NULL && !trim) || list == NULL || list->length == 0) return;
 8003d9c:	bf00      	nop
 8003d9e:	e002      	b.n	8003da6 <Remove_DD_TaskList+0x18e>
		return;
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <Remove_DD_TaskList+0x18e>
            return;
 8003da4:	bf00      	nop
    }
}
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <Add_DD_Overdue_TaskList>:

/*
 * Adds a task to the overdue list
 */
void Add_DD_Overdue_TaskList(ddListHandle overdueList, ddTaskHandle curTask) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
	// Overdue list is empty
	if(overdueList->length == 0) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <Add_DD_Overdue_TaskList+0x26>
		overdueList->length = 1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
		overdueList->head = curTask;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
		overdueList->tail = curTask;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	e010      	b.n	8003df4 <Add_DD_Overdue_TaskList+0x48>
	} else {
		// Otherwise, add the task to the tail of the overdue list
		ddTaskHandle prevTail = overdueList->tail;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60fb      	str	r3, [r7, #12]
		overdueList->tail = curTask;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	609a      	str	r2, [r3, #8]
		prevTail->next = curTask;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	611a      	str	r2, [r3, #16]
		curTask->previous = prevTail;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	619a      	str	r2, [r3, #24]
		overdueList->length += 1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	601a      	str	r2, [r3, #0]
	}

	// Stop its execution
	vTaskSuspend(curTask->handle);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fec3 	bl	8001b84 <vTaskSuspend>
	vTaskDelete(curTask->handle);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd fcba 	bl	800177c <vTaskDelete>
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <Transfer_DD_TaskList>:

/*
 * Transfers a task from the active to the overdue list
 */
void Transfer_DD_TaskList(ddListHandle activeList, ddListHandle overdueList) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
	// Confirm valid list
	if(activeList == NULL || overdueList == NULL) return;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d026      	beq.n	8003e6e <Transfer_DD_TaskList+0x5e>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d023      	beq.n	8003e6e <Transfer_DD_TaskList+0x5e>

	ddTaskHandle curTask = activeList->head;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]
    TickType_t curTicks = xTaskGetTickCount();
 8003e2c:	f7fe f8be 	bl	8001fac <xTaskGetTickCount>
 8003e30:	60b8      	str	r0, [r7, #8]

    // Iterate through the list and remove overdue tasks from the active list and add to the overdue list
    while(curTask != NULL) {
 8003e32:	e018      	b.n	8003e66 <Transfer_DD_TaskList+0x56>
        if(curTicks > 0 && curTask->deadline < (curTicks)) {
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d012      	beq.n	8003e60 <Transfer_DD_TaskList+0x50>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d20d      	bcs.n	8003e60 <Transfer_DD_TaskList+0x50>
        	Remove_DD_TaskList(curTask->handle, activeList, true, false);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6898      	ldr	r0, [r3, #8]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	f7ff fee3 	bl	8003c18 <Remove_DD_TaskList>
        	curTask->next = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
        	Add_DD_Overdue_TaskList(overdueList, curTask);
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f7ff ffa6 	bl	8003dac <Add_DD_Overdue_TaskList>
        }
        curTask = curTask->next;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	60fb      	str	r3, [r7, #12]
    while(curTask != NULL) {
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e3      	bne.n	8003e34 <Transfer_DD_TaskList+0x24>
 8003e6c:	e000      	b.n	8003e70 <Transfer_DD_TaskList+0x60>
	if(activeList == NULL || overdueList == NULL) return;
 8003e6e:	bf00      	nop
    }
}
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <Get_DD_TaskList>:


/*
 * Generates and returns a formatted string of the contents of the input list
 */
char* Get_DD_TaskList(ddListHandle list) {
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b09c      	sub	sp, #112	; 0x70
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	// Malloc and reset the space for the string
    uint32_t lenList= list->length;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	667b      	str	r3, [r7, #100]	; 0x64
	char* outputString = (char*)pvPortMalloc(((configMAX_TASK_NAME_LEN + 50) * (lenList + 1)));
 8003e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e88:	3301      	adds	r3, #1
 8003e8a:	2246      	movs	r2, #70	; 0x46
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc fc65 	bl	8000760 <pvPortMalloc>
 8003e96:	6638      	str	r0, [r7, #96]	; 0x60
	outputString[0] = '\0';
 8003e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]

    if(lenList == 0) {
 8003e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d112      	bne.n	8003eca <Get_DD_TaskList+0x52>
    	char emptyString[21] = ("Nothing in list.");
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <Get_DD_TaskList+0xb4>)
 8003ea6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8003eaa:	461d      	mov	r5, r3
 8003eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	7023      	strb	r3, [r4, #0]
 8003eb4:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
    	strcat(outputString, emptyString);
 8003ebc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003ec4:	f000 ff95 	bl	8004df2 <strcat>
 8003ec8:	e02b      	b.n	8003f22 <Get_DD_TaskList+0xaa>
    } else {
    	// Starting from the head, iterate through the list and append the formatted data to the outputString
    	ddTaskHandle curTask = list->head;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	66fb      	str	r3, [r7, #108]	; 0x6c
		while(curTask != NULL) {
 8003ed0:	e024      	b.n	8003f1c <Get_DD_TaskList+0xa4>
			char curString[60];
			uint32_t deadline = (unsigned int) curTask->deadline;
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	66bb      	str	r3, [r7, #104]	; 0x68
			uint32_t curMod = deadline % 5;
 8003ed8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <Get_DD_TaskList+0xb8>)
 8003edc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee0:	0899      	lsrs	r1, r3, #2
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	65fb      	str	r3, [r7, #92]	; 0x5c
			if(curMod != 0) deadline -= curMod;
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <Get_DD_TaskList+0x82>
 8003ef2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	66bb      	str	r3, [r7, #104]	; 0x68
			sprintf(curString, "Task: %s with deadline: %u \n", curTask->name, deadline);
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	f107 0008 	add.w	r0, r7, #8
 8003f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f04:	490b      	ldr	r1, [pc, #44]	; (8003f34 <Get_DD_TaskList+0xbc>)
 8003f06:	f000 fec9 	bl	8004c9c <sprintf>
			strcat(outputString, curString);
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003f12:	f000 ff6e 	bl	8004df2 <strcat>
			curTask = curTask->next;
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
		while(curTask != NULL) {
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1d7      	bne.n	8003ed2 <Get_DD_TaskList+0x5a>
		}
    }
    return outputString;
 8003f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3770      	adds	r7, #112	; 0x70
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f2c:	0800507c 	.word	0x0800507c
 8003f30:	cccccccd 	.word	0xcccccccd
 8003f34:	0800505c 	.word	0x0800505c

08003f38 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003f42:	bf00      	nop
}
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <DD_Scheduler>:


/*
 * Accepts scheduling messages and calls scheduling helper functions accordingly.
 */
void DD_Scheduler(void *pvParameters) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b090      	sub	sp, #64	; 0x40
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	messageHandle message;
    ddTaskHandle taskHandle = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c

    while(1) {
        if(xQueueReceive(xSchedulerMessageQueue, (void*)&message, portMAX_DELAY) == pdTRUE) {
 8003f6c:	4b8c      	ldr	r3, [pc, #560]	; (80041a0 <DD_Scheduler+0x240>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003f74:	2300      	movs	r3, #0
 8003f76:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7a:	f7fd f829 	bl	8000fd0 <xQueueGenericReceive>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d1f3      	bne.n	8003f6c <DD_Scheduler+0xc>
            Transfer_DD_TaskList(&activeList, &overdueList); // Transfer any overdue tasks to the overdue list
 8003f84:	4987      	ldr	r1, [pc, #540]	; (80041a4 <DD_Scheduler+0x244>)
 8003f86:	4888      	ldr	r0, [pc, #544]	; (80041a8 <DD_Scheduler+0x248>)
 8003f88:	f7ff ff42 	bl	8003e10 <Transfer_DD_TaskList>
            while(overdueList.length > 5) Remove_DD_TaskList(NULL, &overdueList, false, true); // Trim down the overdue list if larger than 5
 8003f8c:	e005      	b.n	8003f9a <DD_Scheduler+0x3a>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	2200      	movs	r2, #0
 8003f92:	4984      	ldr	r1, [pc, #528]	; (80041a4 <DD_Scheduler+0x244>)
 8003f94:	2000      	movs	r0, #0
 8003f96:	f7ff fe3f 	bl	8003c18 <Remove_DD_TaskList>
 8003f9a:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <DD_Scheduler+0x244>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d8f5      	bhi.n	8003f8e <DD_Scheduler+0x2e>

            if(xTaskGetTickCount() > 1500){
 8003fa2:	f7fe f803 	bl	8001fac <xTaskGetTickCount>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d902      	bls.n	8003fb6 <DD_Scheduler+0x56>
            	exit(0);
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f000 fed3 	bl	8004d5c <exit>
            }

			if(message.type == CREATE) {
 8003fb6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d148      	bne.n	8004050 <DD_Scheduler+0xf0>
				// Insert the deadline driven task into the active list
				taskHandle = (ddTaskHandle)message.data;
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
				Insert_DD_Task(taskHandle, &activeList);
 8003fc2:	4979      	ldr	r1, [pc, #484]	; (80041a8 <DD_Scheduler+0x248>)
 8003fc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fc6:	f7ff fd40 	bl	8003a4a <Insert_DD_Task>

				uint16_t flag = 1;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
				char name[32] = "";
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	f107 0310 	add.w	r3, r7, #16
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	615a      	str	r2, [r3, #20]
 8003fe4:	619a      	str	r2, [r3, #24]
				strcat(name, taskHandle->name);
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fefe 	bl	8004df2 <strcat>
				if (name[14] == '1') {
 8003ff6:	7ebb      	ldrb	r3, [r7, #26]
 8003ff8:	2b31      	cmp	r3, #49	; 0x31
 8003ffa:	d108      	bne.n	800400e <DD_Scheduler+0xae>
					xQueueOverwrite(xTask1Queue, &flag);
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <DD_Scheduler+0x24c>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8004004:	2302      	movs	r3, #2
 8004006:	2200      	movs	r2, #0
 8004008:	f7fc fe54 	bl	8000cb4 <xQueueGenericSend>
 800400c:	e7ae      	b.n	8003f6c <DD_Scheduler+0xc>
				} else if(name[14] == '2'){
 800400e:	7ebb      	ldrb	r3, [r7, #26]
 8004010:	2b32      	cmp	r3, #50	; 0x32
 8004012:	d108      	bne.n	8004026 <DD_Scheduler+0xc6>
					xQueueOverwrite(xTask2Queue, &flag);
 8004014:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <DD_Scheduler+0x250>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 800401c:	2302      	movs	r3, #2
 800401e:	2200      	movs	r2, #0
 8004020:	f7fc fe48 	bl	8000cb4 <xQueueGenericSend>
 8004024:	e7a2      	b.n	8003f6c <DD_Scheduler+0xc>
				} else if(name[14] == '3'){
 8004026:	7ebb      	ldrb	r3, [r7, #26]
 8004028:	2b33      	cmp	r3, #51	; 0x33
 800402a:	d108      	bne.n	800403e <DD_Scheduler+0xde>
					xQueueOverwrite(xTask3Queue, &flag);
 800402c:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <DD_Scheduler+0x254>)
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8004034:	2302      	movs	r3, #2
 8004036:	2200      	movs	r2, #0
 8004038:	f7fc fe3c 	bl	8000cb4 <xQueueGenericSend>
 800403c:	e796      	b.n	8003f6c <DD_Scheduler+0xc>
				} else {
					xQueueOverwrite(xTaskAperiodicQueue, &flag);
 800403e:	4b5e      	ldr	r3, [pc, #376]	; (80041b8 <DD_Scheduler+0x258>)
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8004046:	2302      	movs	r3, #2
 8004048:	2200      	movs	r2, #0
 800404a:	f7fc fe33 	bl	8000cb4 <xQueueGenericSend>
 800404e:	e78d      	b.n	8003f6c <DD_Scheduler+0xc>
				}

			} else if (message.type == DELETE) {
 8004050:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004054:	2b01      	cmp	r3, #1
 8004056:	d148      	bne.n	80040ea <DD_Scheduler+0x18a>
				// Remove the deadline driven task from its list
				Remove_DD_TaskList(message.sender, &activeList, false, false);
 8004058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800405a:	2300      	movs	r3, #0
 800405c:	2200      	movs	r2, #0
 800405e:	4952      	ldr	r1, [pc, #328]	; (80041a8 <DD_Scheduler+0x248>)
 8004060:	f7ff fdda 	bl	8003c18 <Remove_DD_TaskList>

				uint16_t flag = 1;
 8004064:	2301      	movs	r3, #1
 8004066:	85bb      	strh	r3, [r7, #44]	; 0x2c
				char name[32] = "";
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	f107 0310 	add.w	r3, r7, #16
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
 800407c:	615a      	str	r2, [r3, #20]
 800407e:	619a      	str	r2, [r3, #24]
				strcat(name, taskHandle->name);
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 feb1 	bl	8004df2 <strcat>
				if (name[14] == '1') {
 8004090:	7ebb      	ldrb	r3, [r7, #26]
 8004092:	2b31      	cmp	r3, #49	; 0x31
 8004094:	d108      	bne.n	80040a8 <DD_Scheduler+0x148>
					xQueueOverwrite(xTask1Queue, &flag);
 8004096:	4b45      	ldr	r3, [pc, #276]	; (80041ac <DD_Scheduler+0x24c>)
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800409e:	2302      	movs	r3, #2
 80040a0:	2200      	movs	r2, #0
 80040a2:	f7fc fe07 	bl	8000cb4 <xQueueGenericSend>
 80040a6:	e761      	b.n	8003f6c <DD_Scheduler+0xc>
				} else if(name[14] == '2'){
 80040a8:	7ebb      	ldrb	r3, [r7, #26]
 80040aa:	2b32      	cmp	r3, #50	; 0x32
 80040ac:	d108      	bne.n	80040c0 <DD_Scheduler+0x160>
					xQueueOverwrite(xTask2Queue, &flag);
 80040ae:	4b40      	ldr	r3, [pc, #256]	; (80041b0 <DD_Scheduler+0x250>)
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80040b6:	2302      	movs	r3, #2
 80040b8:	2200      	movs	r2, #0
 80040ba:	f7fc fdfb 	bl	8000cb4 <xQueueGenericSend>
 80040be:	e755      	b.n	8003f6c <DD_Scheduler+0xc>
				} else if(name[14] == '3'){
 80040c0:	7ebb      	ldrb	r3, [r7, #26]
 80040c2:	2b33      	cmp	r3, #51	; 0x33
 80040c4:	d108      	bne.n	80040d8 <DD_Scheduler+0x178>
					xQueueOverwrite(xTask3Queue, &flag);
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <DD_Scheduler+0x254>)
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80040ce:	2302      	movs	r3, #2
 80040d0:	2200      	movs	r2, #0
 80040d2:	f7fc fdef 	bl	8000cb4 <xQueueGenericSend>
 80040d6:	e749      	b.n	8003f6c <DD_Scheduler+0xc>
				} else {
					xQueueOverwrite(xTaskAperiodicQueue, &flag);
 80040d8:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <DD_Scheduler+0x258>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80040e0:	2302      	movs	r3, #2
 80040e2:	2200      	movs	r2, #0
 80040e4:	f7fc fde6 	bl	8000cb4 <xQueueGenericSend>
 80040e8:	e740      	b.n	8003f6c <DD_Scheduler+0xc>
				}

			} else if (message.type == ACTIVE_LIST) {
 80040ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d124      	bne.n	800413c <DD_Scheduler+0x1dc>
				// Get the active list
				message.data = (void*)Get_DD_TaskList(&activeList);
 80040f2:	482d      	ldr	r0, [pc, #180]	; (80041a8 <DD_Scheduler+0x248>)
 80040f4:	f7ff fec0 	bl	8003e78 <Get_DD_TaskList>
 80040f8:	4603      	mov	r3, r0
 80040fa:	63bb      	str	r3, [r7, #56]	; 0x38

				// Clear the monitor queue if full
				if(uxQueueSpacesAvailable(xMonitorMessageQueue) == 0) xQueueReset(xMonitorMessageQueue);
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <DD_Scheduler+0x25c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fd f877 	bl	80011f4 <uxQueueSpacesAvailable>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <DD_Scheduler+0x1b8>
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <DD_Scheduler+0x25c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc fd0a 	bl	8000b2c <xQueueGenericReset>

				// Send data to monitor queue
				if( xMonitorMessageQueue == NULL) return;
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <DD_Scheduler+0x25c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d036      	beq.n	800418e <DD_Scheduler+0x22e>
				if( xQueueSend( xMonitorMessageQueue, &message, (TickType_t) portMAX_DELAY ) != pdPASS ) return;
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <DD_Scheduler+0x25c>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004128:	2300      	movs	r3, #0
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	f7fc fdc1 	bl	8000cb4 <xQueueGenericSend>
 8004132:	4603      	mov	r3, r0
 8004134:	2b01      	cmp	r3, #1
 8004136:	f43f af19 	beq.w	8003f6c <DD_Scheduler+0xc>
 800413a:	e02d      	b.n	8004198 <DD_Scheduler+0x238>

			} else if (message.type == OVERDUE_LIST) {
 800413c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004140:	2b03      	cmp	r3, #3
 8004142:	f47f af13 	bne.w	8003f6c <DD_Scheduler+0xc>
				// Get the overdue list
				message.data = (void*)Get_DD_TaskList(&overdueList);
 8004146:	4817      	ldr	r0, [pc, #92]	; (80041a4 <DD_Scheduler+0x244>)
 8004148:	f7ff fe96 	bl	8003e78 <Get_DD_TaskList>
 800414c:	4603      	mov	r3, r0
 800414e:	63bb      	str	r3, [r7, #56]	; 0x38

				// Clear the monitor queue if full
				if(uxQueueSpacesAvailable(xMonitorMessageQueue) == 0) xQueueReset(xMonitorMessageQueue);
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <DD_Scheduler+0x25c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd f84d 	bl	80011f4 <uxQueueSpacesAvailable>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <DD_Scheduler+0x20c>
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <DD_Scheduler+0x25c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc fce0 	bl	8000b2c <xQueueGenericReset>

				// Send data to monitor queue
				if(xMonitorMessageQueue == NULL) return;
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <DD_Scheduler+0x25c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <DD_Scheduler+0x232>
				if(xQueueSend( xMonitorMessageQueue, &message, (TickType_t) portMAX_DELAY ) != pdPASS) return;
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <DD_Scheduler+0x25c>)
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800417c:	2300      	movs	r3, #0
 800417e:	f04f 32ff 	mov.w	r2, #4294967295
 8004182:	f7fc fd97 	bl	8000cb4 <xQueueGenericSend>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d104      	bne.n	8004196 <DD_Scheduler+0x236>
        if(xQueueReceive(xSchedulerMessageQueue, (void*)&message, portMAX_DELAY) == pdTRUE) {
 800418c:	e6ee      	b.n	8003f6c <DD_Scheduler+0xc>
				if( xMonitorMessageQueue == NULL) return;
 800418e:	bf00      	nop
 8004190:	e002      	b.n	8004198 <DD_Scheduler+0x238>
				if(xMonitorMessageQueue == NULL) return;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <DD_Scheduler+0x238>
				if(xQueueSend( xMonitorMessageQueue, &message, (TickType_t) portMAX_DELAY ) != pdPASS) return;
 8004196:	bf00      	nop

			}
        }
    }
}
 8004198:	3740      	adds	r7, #64	; 0x40
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	2000f428 	.word	0x2000f428
 80041a4:	2000f41c 	.word	0x2000f41c
 80041a8:	2000f410 	.word	0x2000f410
 80041ac:	2000f438 	.word	0x2000f438
 80041b0:	2000f430 	.word	0x2000f430
 80041b4:	2000f434 	.word	0x2000f434
 80041b8:	2000f43c 	.word	0x2000f43c
 80041bc:	2000f42c 	.word	0x2000f42c

080041c0 <DD_Scheduler_Init>:

/*
 * Initializes the active and overdue lists and corresponding tasks/queues
 */
void DD_Scheduler_Init() {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af02      	add	r7, sp, #8
    Init_DD_TaskList(&overdueList);
 80041c6:	481c      	ldr	r0, [pc, #112]	; (8004238 <DD_Scheduler_Init+0x78>)
 80041c8:	f7ff fc28 	bl	8003a1c <Init_DD_TaskList>
    Init_DD_TaskList(&activeList);
 80041cc:	481b      	ldr	r0, [pc, #108]	; (800423c <DD_Scheduler_Init+0x7c>)
 80041ce:	f7ff fc25 	bl	8003a1c <Init_DD_TaskList>

    // Assign highest priority to inter-task communications
    xSchedulerMessageQueue = xQueueCreate(MAX_DD_TASK_PRIORITY, sizeof(messageHandle));
 80041d2:	2200      	movs	r2, #0
 80041d4:	210c      	movs	r1, #12
 80041d6:	201b      	movs	r0, #27
 80041d8:	f7fc fd10 	bl	8000bfc <xQueueGenericCreate>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b18      	ldr	r3, [pc, #96]	; (8004240 <DD_Scheduler_Init+0x80>)
 80041e0:	601a      	str	r2, [r3, #0]
    vQueueAddToRegistry(xSchedulerMessageQueue,"Scheduler Queue");
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <DD_Scheduler_Init+0x80>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4917      	ldr	r1, [pc, #92]	; (8004244 <DD_Scheduler_Init+0x84>)
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd f935 	bl	8001458 <vQueueAddToRegistry>

    xMonitorMessageQueue = xQueueCreate(2, sizeof(messageHandle));
 80041ee:	2200      	movs	r2, #0
 80041f0:	210c      	movs	r1, #12
 80041f2:	2002      	movs	r0, #2
 80041f4:	f7fc fd02 	bl	8000bfc <xQueueGenericCreate>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <DD_Scheduler_Init+0x88>)
 80041fc:	601a      	str	r2, [r3, #0]
    vQueueAddToRegistry(xMonitorMessageQueue,"Monitor Queue");
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <DD_Scheduler_Init+0x88>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4912      	ldr	r1, [pc, #72]	; (800424c <DD_Scheduler_Init+0x8c>)
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd f927 	bl	8001458 <vQueueAddToRegistry>

    xTaskCreate(DD_Scheduler , "DD Scheduler Task" 	, configMINIMAL_STACK_SIZE , NULL , SCHEDULER_DD_PRIORITY , NULL);
 800420a:	2300      	movs	r3, #0
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	231f      	movs	r3, #31
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	2300      	movs	r3, #0
 8004214:	2282      	movs	r2, #130	; 0x82
 8004216:	490e      	ldr	r1, [pc, #56]	; (8004250 <DD_Scheduler_Init+0x90>)
 8004218:	480e      	ldr	r0, [pc, #56]	; (8004254 <DD_Scheduler_Init+0x94>)
 800421a:	f7fd f979 	bl	8001510 <xTaskCreate>
    xTaskCreate(Monitor		 , "Monitor Task"   	, configMINIMAL_STACK_SIZE , NULL , MONITOR_DD_PRIORITY   , NULL);
 800421e:	2300      	movs	r3, #0
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	231e      	movs	r3, #30
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2300      	movs	r3, #0
 8004228:	2282      	movs	r2, #130	; 0x82
 800422a:	490b      	ldr	r1, [pc, #44]	; (8004258 <DD_Scheduler_Init+0x98>)
 800422c:	480b      	ldr	r0, [pc, #44]	; (800425c <DD_Scheduler_Init+0x9c>)
 800422e:	f7fd f96f 	bl	8001510 <xTaskCreate>

}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	2000f41c 	.word	0x2000f41c
 800423c:	2000f410 	.word	0x2000f410
 8004240:	2000f428 	.word	0x2000f428
 8004244:	08005094 	.word	0x08005094
 8004248:	2000f42c 	.word	0x2000f42c
 800424c:	080050a4 	.word	0x080050a4
 8004250:	080050b4 	.word	0x080050b4
 8004254:	08003f61 	.word	0x08003f61
 8004258:	080050c8 	.word	0x080050c8
 800425c:	08004461 	.word	0x08004461

08004260 <Create_DD_Task>:

/*
 * Creates a deadline-driven task as a FreeRTOS task and sends a create notification to the scheduler
 */
void Create_DD_Task(ddTaskHandle task) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b090      	sub	sp, #64	; 0x40
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]

    if( task == NULL ) return;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d07b      	beq.n	8004366 <Create_DD_Task+0x106>

    xTaskCreate(task->function,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6858      	ldr	r0, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68d9      	ldr	r1, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3308      	adds	r3, #8
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	2301      	movs	r3, #1
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2282      	movs	r2, #130	; 0x82
 8004284:	f7fd f944 	bl	8001510 <xTaskCreate>
                configMINIMAL_STACK_SIZE,
                (void*)task,
				MIN_DD_PRIORITY,
                &(task->handle));

    if(task->handle == NULL) return;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d06c      	beq.n	800436a <Create_DD_Task+0x10a>

    // Suspend the task until it was been added to the deadline driven scheduler
    vTaskSuspend(task->handle);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd fc75 	bl	8001b84 <vTaskSuspend>

    messageHandle message = {CREATE, xTaskGetCurrentTaskHandle(), task};
 800429a:	2300      	movs	r3, #0
 800429c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80042a0:	f7fe f9da 	bl	8002658 <xTaskGetCurrentTaskHandle>
 80042a4:	4603      	mov	r3, r0
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34

    if(xSchedulerMessageQueue == NULL) return;
 80042ac:	4b33      	ldr	r3, [pc, #204]	; (800437c <Create_DD_Task+0x11c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05c      	beq.n	800436e <Create_DD_Task+0x10e>
    if(xQueueSend(xSchedulerMessageQueue, &message, portMAX_DELAY) != pdPASS) return;
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <Create_DD_Task+0x11c>)
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80042bc:	2300      	movs	r3, #0
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	f7fc fcf7 	bl	8000cb4 <xQueueGenericSend>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d152      	bne.n	8004372 <Create_DD_Task+0x112>

    // Resume the task once it's been added to the deadline driven scheduler
    uint16_t flag = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	857b      	strh	r3, [r7, #42]	; 0x2a
	char name[32] = "";
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	f107 030c 	add.w	r3, r7, #12
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
 80042e4:	615a      	str	r2, [r3, #20]
 80042e6:	619a      	str	r2, [r3, #24]
	strcat(name, task->name);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fd7d 	bl	8004df2 <strcat>
	if (name[14] == '1') {
 80042f8:	7dbb      	ldrb	r3, [r7, #22]
 80042fa:	2b31      	cmp	r3, #49	; 0x31
 80042fc:	d109      	bne.n	8004312 <Create_DD_Task+0xb2>
		xQueueReceive(xTask1Queue, &flag, portMAX_DELAY);
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <Create_DD_Task+0x120>)
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8004306:	2300      	movs	r3, #0
 8004308:	f04f 32ff 	mov.w	r2, #4294967295
 800430c:	f7fc fe60 	bl	8000fd0 <xQueueGenericReceive>
 8004310:	e022      	b.n	8004358 <Create_DD_Task+0xf8>
	} else if(name[14] == '2'){
 8004312:	7dbb      	ldrb	r3, [r7, #22]
 8004314:	2b32      	cmp	r3, #50	; 0x32
 8004316:	d109      	bne.n	800432c <Create_DD_Task+0xcc>
		xQueueReceive(xTask2Queue, &flag, portMAX_DELAY);
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <Create_DD_Task+0x124>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8004320:	2300      	movs	r3, #0
 8004322:	f04f 32ff 	mov.w	r2, #4294967295
 8004326:	f7fc fe53 	bl	8000fd0 <xQueueGenericReceive>
 800432a:	e015      	b.n	8004358 <Create_DD_Task+0xf8>
	} else if(name[14] == '3'){
 800432c:	7dbb      	ldrb	r3, [r7, #22]
 800432e:	2b33      	cmp	r3, #51	; 0x33
 8004330:	d109      	bne.n	8004346 <Create_DD_Task+0xe6>
		xQueueReceive(xTask3Queue, &flag, portMAX_DELAY);
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <Create_DD_Task+0x128>)
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800433a:	2300      	movs	r3, #0
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	f7fc fe46 	bl	8000fd0 <xQueueGenericReceive>
 8004344:	e008      	b.n	8004358 <Create_DD_Task+0xf8>
	} else {
		xQueueReceive(xTaskAperiodicQueue, &flag, portMAX_DELAY);
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <Create_DD_Task+0x12c>)
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800434e:	2300      	movs	r3, #0
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	f7fc fe3c 	bl	8000fd0 <xQueueGenericReceive>
	}
    vTaskResume(task->handle);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fd fcd3 	bl	8001d08 <vTaskResume>
    return;
 8004362:	bf00      	nop
 8004364:	e006      	b.n	8004374 <Create_DD_Task+0x114>
    if( task == NULL ) return;
 8004366:	bf00      	nop
 8004368:	e004      	b.n	8004374 <Create_DD_Task+0x114>
    if(task->handle == NULL) return;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <Create_DD_Task+0x114>
    if(xSchedulerMessageQueue == NULL) return;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <Create_DD_Task+0x114>
    if(xQueueSend(xSchedulerMessageQueue, &message, portMAX_DELAY) != pdPASS) return;
 8004372:	bf00      	nop
}
 8004374:	3738      	adds	r7, #56	; 0x38
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000f428 	.word	0x2000f428
 8004380:	2000f438 	.word	0x2000f438
 8004384:	2000f430 	.word	0x2000f430
 8004388:	2000f434 	.word	0x2000f434
 800438c:	2000f43c 	.word	0x2000f43c

08004390 <Delete_DD_Task>:

/*
 * Sends a delete command to deadline-driven scheduler and then deletes the FreeRTOS task
 */
void Delete_DD_Task(TaskHandle_t task, char number) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	70fb      	strb	r3, [r7, #3]
    if(task == NULL) return;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04c      	beq.n	800443c <Delete_DD_Task+0xac>

    messageHandle task_message = {DELETE, task, NULL};
 80043a2:	2301      	movs	r3, #1
 80043a4:	733b      	strb	r3, [r7, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]

    // Send the message to the scheduler queue
    if(xSchedulerMessageQueue == NULL) return;
 80043ae:	4b27      	ldr	r3, [pc, #156]	; (800444c <Delete_DD_Task+0xbc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d044      	beq.n	8004440 <Delete_DD_Task+0xb0>
	if(xQueueSend(xSchedulerMessageQueue, &task_message, portMAX_DELAY) != pdPASS) return;
 80043b6:	4b25      	ldr	r3, [pc, #148]	; (800444c <Delete_DD_Task+0xbc>)
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f107 010c 	add.w	r1, r7, #12
 80043be:	2300      	movs	r3, #0
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295
 80043c4:	f7fc fc76 	bl	8000cb4 <xQueueGenericSend>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d13a      	bne.n	8004444 <Delete_DD_Task+0xb4>

    //ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // Wait
	uint16_t flag = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	817b      	strh	r3, [r7, #10]
	if(number == '1') {
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	2b31      	cmp	r3, #49	; 0x31
 80043d6:	d109      	bne.n	80043ec <Delete_DD_Task+0x5c>
		xQueueReceive(xTask1Queue, &flag, portMAX_DELAY);
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <Delete_DD_Task+0xc0>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	f107 010a 	add.w	r1, r7, #10
 80043e0:	2300      	movs	r3, #0
 80043e2:	f04f 32ff 	mov.w	r2, #4294967295
 80043e6:	f7fc fdf3 	bl	8000fd0 <xQueueGenericReceive>
 80043ea:	e022      	b.n	8004432 <Delete_DD_Task+0xa2>
	} else if(number == '2'){
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	2b32      	cmp	r3, #50	; 0x32
 80043f0:	d109      	bne.n	8004406 <Delete_DD_Task+0x76>
		xQueueReceive(xTask2Queue, &flag, portMAX_DELAY);
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <Delete_DD_Task+0xc4>)
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	f107 010a 	add.w	r1, r7, #10
 80043fa:	2300      	movs	r3, #0
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004400:	f7fc fde6 	bl	8000fd0 <xQueueGenericReceive>
 8004404:	e015      	b.n	8004432 <Delete_DD_Task+0xa2>
	} else if(number == '3'){
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	2b33      	cmp	r3, #51	; 0x33
 800440a:	d109      	bne.n	8004420 <Delete_DD_Task+0x90>
		xQueueReceive(xTask3Queue, &flag, portMAX_DELAY);
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <Delete_DD_Task+0xc8>)
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	f107 010a 	add.w	r1, r7, #10
 8004414:	2300      	movs	r3, #0
 8004416:	f04f 32ff 	mov.w	r2, #4294967295
 800441a:	f7fc fdd9 	bl	8000fd0 <xQueueGenericReceive>
 800441e:	e008      	b.n	8004432 <Delete_DD_Task+0xa2>
	} else {
		xQueueReceive(xTaskAperiodicQueue, &flag, portMAX_DELAY);
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <Delete_DD_Task+0xcc>)
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	f107 010a 	add.w	r1, r7, #10
 8004428:	2300      	movs	r3, #0
 800442a:	f04f 32ff 	mov.w	r2, #4294967295
 800442e:	f7fc fdcf 	bl	8000fd0 <xQueueGenericReceive>
	}

    vTaskDelete(task);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd f9a2 	bl	800177c <vTaskDelete>
    return;
 8004438:	bf00      	nop
 800443a:	e004      	b.n	8004446 <Delete_DD_Task+0xb6>
    if(task == NULL) return;
 800443c:	bf00      	nop
 800443e:	e002      	b.n	8004446 <Delete_DD_Task+0xb6>
    if(xSchedulerMessageQueue == NULL) return;
 8004440:	bf00      	nop
 8004442:	e000      	b.n	8004446 <Delete_DD_Task+0xb6>
	if(xQueueSend(xSchedulerMessageQueue, &task_message, portMAX_DELAY) != pdPASS) return;
 8004444:	bf00      	nop
}
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	2000f428 	.word	0x2000f428
 8004450:	2000f438 	.word	0x2000f438
 8004454:	2000f430 	.word	0x2000f430
 8004458:	2000f434 	.word	0x2000f434
 800445c:	2000f43c 	.word	0x2000f43c

08004460 <Monitor>:

/*
 * Task that calls the active/overdue list printers 1x per second
 */
void Monitor(void *pvParameters) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

	uint32_t delay = 10;
 8004468:	230a      	movs	r3, #10
 800446a:	60bb      	str	r3, [r7, #8]
	uint32_t totalDelay = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
	vTaskDelay(delay / portTICK_PERIOD_MS);
 8004470:	68b8      	ldr	r0, [r7, #8]
 8004472:	f7fd fa8b 	bl	800198c <vTaskDelay>
	delay = 750;
 8004476:	f240 23ee 	movw	r3, #750	; 0x2ee
 800447a:	60bb      	str	r3, [r7, #8]
    while(1) {
    	totalDelay += 750;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 8004482:	60fb      	str	r3, [r7, #12]
        vTaskDelay(delay / portTICK_PERIOD_MS);
 8004484:	68b8      	ldr	r0, [r7, #8]
 8004486:	f7fd fa81 	bl	800198c <vTaskDelay>
    	Get_Active_DD_TaskList(totalDelay);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f804 	bl	8004498 <Get_Active_DD_TaskList>
        Get_Overdue_DD_TaskList(totalDelay);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f849 	bl	8004528 <Get_Overdue_DD_TaskList>
    	totalDelay += 750;
 8004496:	e7f1      	b.n	800447c <Monitor+0x1c>

08004498 <Get_Active_DD_TaskList>:
}

/*
 * Prints the contents of the active task list
 */
void Get_Active_DD_TaskList(uint32_t totalDelay) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	messageHandle activeMessage = {ACTIVE_LIST, NULL, NULL};
 80044a0:	2302      	movs	r3, #2
 80044a2:	733b      	strb	r3, [r7, #12]
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

	// Send Message to scheduler queue
	if(xSchedulerMessageQueue == NULL) return;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <Get_Active_DD_TaskList+0x84>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d029      	beq.n	8004508 <Get_Active_DD_TaskList+0x70>
	if(xQueueSend(xSchedulerMessageQueue, &activeMessage, (TickType_t)portMAX_DELAY ) != pdPASS) return;
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <Get_Active_DD_TaskList+0x84>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	f107 010c 	add.w	r1, r7, #12
 80044bc:	2300      	movs	r3, #0
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	f7fc fbf7 	bl	8000cb4 <xQueueGenericSend>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d11f      	bne.n	800450c <Get_Active_DD_TaskList+0x74>

	// Wait for the response data from the monitor queue
	if(xMonitorMessageQueue == NULL) return;
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <Get_Active_DD_TaskList+0x88>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01d      	beq.n	8004510 <Get_Active_DD_TaskList+0x78>
	if(xQueueReceive( xMonitorMessageQueue, &activeMessage, (TickType_t) portMAX_DELAY) == pdTRUE) {
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <Get_Active_DD_TaskList+0x88>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	f107 010c 	add.w	r1, r7, #12
 80044dc:	2300      	movs	r3, #0
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	f7fc fd75 	bl	8000fd0 <xQueueGenericReceive>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d113      	bne.n	8004514 <Get_Active_DD_TaskList+0x7c>
		printf("\n\nActive Tasks at %u: \n%s\n", (unsigned int)totalDelay, (char*)(activeMessage.data));
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	480c      	ldr	r0, [pc, #48]	; (8004524 <Get_Active_DD_TaskList+0x8c>)
 80044f4:	f000 fbe8 	bl	8004cc8 <printf>
		vPortFree(activeMessage.data);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc f9f6 	bl	80008ec <vPortFree>
		activeMessage.data = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
	}

	return;
 8004504:	bf00      	nop
 8004506:	e005      	b.n	8004514 <Get_Active_DD_TaskList+0x7c>
	if(xSchedulerMessageQueue == NULL) return;
 8004508:	bf00      	nop
 800450a:	e004      	b.n	8004516 <Get_Active_DD_TaskList+0x7e>
	if(xQueueSend(xSchedulerMessageQueue, &activeMessage, (TickType_t)portMAX_DELAY ) != pdPASS) return;
 800450c:	bf00      	nop
 800450e:	e002      	b.n	8004516 <Get_Active_DD_TaskList+0x7e>
	if(xMonitorMessageQueue == NULL) return;
 8004510:	bf00      	nop
 8004512:	e000      	b.n	8004516 <Get_Active_DD_TaskList+0x7e>
	return;
 8004514:	bf00      	nop
}
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	2000f428 	.word	0x2000f428
 8004520:	2000f42c 	.word	0x2000f42c
 8004524:	080050d8 	.word	0x080050d8

08004528 <Get_Overdue_DD_TaskList>:

/*
 * Prints the contents of the overdue task list
 */
void Get_Overdue_DD_TaskList(uint32_t totalDelay) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	messageHandle overdueMessage = {OVERDUE_LIST, NULL, NULL};
 8004530:	2303      	movs	r3, #3
 8004532:	733b      	strb	r3, [r7, #12]
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]

    // Send Message to scheduler queue
    if(xSchedulerMessageQueue == NULL) return;
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <Get_Overdue_DD_TaskList+0x84>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d029      	beq.n	8004598 <Get_Overdue_DD_TaskList+0x70>
	if(xQueueSend(xSchedulerMessageQueue, &overdueMessage, (TickType_t)portMAX_DELAY ) != pdPASS) return;
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <Get_Overdue_DD_TaskList+0x84>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	f107 010c 	add.w	r1, r7, #12
 800454c:	2300      	movs	r3, #0
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	f7fc fbaf 	bl	8000cb4 <xQueueGenericSend>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d11f      	bne.n	800459c <Get_Overdue_DD_TaskList+0x74>

    // Wait for the response data from the monitor queue
    if(xMonitorMessageQueue == NULL) return;
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <Get_Overdue_DD_TaskList+0x88>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01d      	beq.n	80045a0 <Get_Overdue_DD_TaskList+0x78>
	if(xQueueReceive( xMonitorMessageQueue, &overdueMessage, (TickType_t) portMAX_DELAY) == pdTRUE) {
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <Get_Overdue_DD_TaskList+0x88>)
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	f107 010c 	add.w	r1, r7, #12
 800456c:	2300      	movs	r3, #0
 800456e:	f04f 32ff 	mov.w	r2, #4294967295
 8004572:	f7fc fd2d 	bl	8000fd0 <xQueueGenericReceive>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d113      	bne.n	80045a4 <Get_Overdue_DD_TaskList+0x7c>
		printf("Overdue Tasks at %u: \n%s\n", totalDelay, (char*)(overdueMessage.data));
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	461a      	mov	r2, r3
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	480c      	ldr	r0, [pc, #48]	; (80045b4 <Get_Overdue_DD_TaskList+0x8c>)
 8004584:	f000 fba0 	bl	8004cc8 <printf>
		vPortFree(overdueMessage.data);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc f9ae 	bl	80008ec <vPortFree>
		overdueMessage.data = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
	}

    return;
 8004594:	bf00      	nop
 8004596:	e005      	b.n	80045a4 <Get_Overdue_DD_TaskList+0x7c>
    if(xSchedulerMessageQueue == NULL) return;
 8004598:	bf00      	nop
 800459a:	e004      	b.n	80045a6 <Get_Overdue_DD_TaskList+0x7e>
	if(xQueueSend(xSchedulerMessageQueue, &overdueMessage, (TickType_t)portMAX_DELAY ) != pdPASS) return;
 800459c:	bf00      	nop
 800459e:	e002      	b.n	80045a6 <Get_Overdue_DD_TaskList+0x7e>
    if(xMonitorMessageQueue == NULL) return;
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <Get_Overdue_DD_TaskList+0x7e>
    return;
 80045a4:	bf00      	nop
}
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000f428 	.word	0x2000f428
 80045b0:	2000f42c 	.word	0x2000f42c
 80045b4:	080050f4 	.word	0x080050f4

080045b8 <main>:
int queueSetup(void);

/*
 * Initializes the deadline-driven tasks and starts the schedulers
 */
int main(void) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af02      	add	r7, sp, #8

	if(queueSetup() == 1) return 0;
 80045be:	f000 f84d 	bl	800465c <queueSetup>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <main+0x14>
 80045c8:	2300      	movs	r3, #0
 80045ca:	e02c      	b.n	8004626 <main+0x6e>
    DD_Scheduler_Init();
 80045cc:	f7ff fdf8 	bl	80041c0 <DD_Scheduler_Init>

    xTaskCreate( PeriodicTaskCreator1 , "PeriodicCreator1"  , configMINIMAL_STACK_SIZE , NULL , GENERATOR_DD_PRIORITY , &PeriodicTaskCreatorHandle1);
 80045d0:	4b16      	ldr	r3, [pc, #88]	; (800462c <main+0x74>)
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	231d      	movs	r3, #29
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	2282      	movs	r2, #130	; 0x82
 80045dc:	4914      	ldr	r1, [pc, #80]	; (8004630 <main+0x78>)
 80045de:	4815      	ldr	r0, [pc, #84]	; (8004634 <main+0x7c>)
 80045e0:	f7fc ff96 	bl	8001510 <xTaskCreate>
    xTaskCreate( PeriodicTaskCreator2 , "PeriodicCreator2"  , configMINIMAL_STACK_SIZE , NULL , GENERATOR_DD_PRIORITY , &PeriodicTaskCreatorHandle2);
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <main+0x80>)
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	231d      	movs	r3, #29
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2300      	movs	r3, #0
 80045ee:	2282      	movs	r2, #130	; 0x82
 80045f0:	4912      	ldr	r1, [pc, #72]	; (800463c <main+0x84>)
 80045f2:	4813      	ldr	r0, [pc, #76]	; (8004640 <main+0x88>)
 80045f4:	f7fc ff8c 	bl	8001510 <xTaskCreate>
    xTaskCreate( PeriodicTaskCreator3 , "PeriodicCreator3"  , configMINIMAL_STACK_SIZE , NULL , GENERATOR_DD_PRIORITY , &PeriodicTaskCreatorHandle3);
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <main+0x8c>)
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	231d      	movs	r3, #29
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	2300      	movs	r3, #0
 8004602:	2282      	movs	r2, #130	; 0x82
 8004604:	4910      	ldr	r1, [pc, #64]	; (8004648 <main+0x90>)
 8004606:	4811      	ldr	r0, [pc, #68]	; (800464c <main+0x94>)
 8004608:	f7fc ff82 	bl	8001510 <xTaskCreate>
    xTaskCreate( AperiodicTaskCreator , "AperiodicCreator" 	, configMINIMAL_STACK_SIZE , NULL , GENERATOR_DD_PRIORITY , &AperiodicTaskCreatorHandle);
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <main+0x98>)
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	231d      	movs	r3, #29
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	2282      	movs	r2, #130	; 0x82
 8004618:	490e      	ldr	r1, [pc, #56]	; (8004654 <main+0x9c>)
 800461a:	480f      	ldr	r0, [pc, #60]	; (8004658 <main+0xa0>)
 800461c:	f7fc ff78 	bl	8001510 <xTaskCreate>

    vTaskStartScheduler();
 8004620:	f7fd fbce 	bl	8001dc0 <vTaskStartScheduler>

    return 0;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	2000f504 	.word	0x2000f504
 8004630:	08005110 	.word	0x08005110
 8004634:	08003491 	.word	0x08003491
 8004638:	2000f508 	.word	0x2000f508
 800463c:	08005124 	.word	0x08005124
 8004640:	080034ed 	.word	0x080034ed
 8004644:	2000f4fc 	.word	0x2000f4fc
 8004648:	08005138 	.word	0x08005138
 800464c:	08003549 	.word	0x08003549
 8004650:	2000f500 	.word	0x2000f500
 8004654:	0800514c 	.word	0x0800514c
 8004658:	0800330d 	.word	0x0800330d

0800465c <queueSetup>:

/*
 * Initializes the necessary queues
 */
int queueSetup(void) {
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
	xTask1Queue = xQueueCreate(1, sizeof(uint16_t));
 8004660:	2200      	movs	r2, #0
 8004662:	2102      	movs	r1, #2
 8004664:	2001      	movs	r0, #1
 8004666:	f7fc fac9 	bl	8000bfc <xQueueGenericCreate>
 800466a:	4602      	mov	r2, r0
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <queueSetup+0xac>)
 800466e:	601a      	str	r2, [r3, #0]
	if(xTask1Queue == NULL) return 1;
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <queueSetup+0xac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <queueSetup+0x20>
 8004678:	2301      	movs	r3, #1
 800467a:	e042      	b.n	8004702 <queueSetup+0xa6>
	vQueueAddToRegistry(xTask1Queue, "xTask1Queue");
 800467c:	4b22      	ldr	r3, [pc, #136]	; (8004708 <queueSetup+0xac>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4922      	ldr	r1, [pc, #136]	; (800470c <queueSetup+0xb0>)
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fee8 	bl	8001458 <vQueueAddToRegistry>

	xTask2Queue = xQueueCreate(1, sizeof(uint16_t));
 8004688:	2200      	movs	r2, #0
 800468a:	2102      	movs	r1, #2
 800468c:	2001      	movs	r0, #1
 800468e:	f7fc fab5 	bl	8000bfc <xQueueGenericCreate>
 8004692:	4602      	mov	r2, r0
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <queueSetup+0xb4>)
 8004696:	601a      	str	r2, [r3, #0]
	if(xTask2Queue == NULL) return 1;
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <queueSetup+0xb4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <queueSetup+0x48>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e02e      	b.n	8004702 <queueSetup+0xa6>
	vQueueAddToRegistry(xTask2Queue, "xTask2Queue");
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <queueSetup+0xb4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	491a      	ldr	r1, [pc, #104]	; (8004714 <queueSetup+0xb8>)
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fc fed4 	bl	8001458 <vQueueAddToRegistry>

	xTask3Queue = xQueueCreate(1, sizeof(uint16_t));
 80046b0:	2200      	movs	r2, #0
 80046b2:	2102      	movs	r1, #2
 80046b4:	2001      	movs	r0, #1
 80046b6:	f7fc faa1 	bl	8000bfc <xQueueGenericCreate>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <queueSetup+0xbc>)
 80046be:	601a      	str	r2, [r3, #0]
	if(xTask3Queue == NULL) return 1;
 80046c0:	4b15      	ldr	r3, [pc, #84]	; (8004718 <queueSetup+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <queueSetup+0x70>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e01a      	b.n	8004702 <queueSetup+0xa6>
	vQueueAddToRegistry(xTask3Queue, "xTask3Queue");
 80046cc:	4b12      	ldr	r3, [pc, #72]	; (8004718 <queueSetup+0xbc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4912      	ldr	r1, [pc, #72]	; (800471c <queueSetup+0xc0>)
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fc fec0 	bl	8001458 <vQueueAddToRegistry>

	xTaskAperiodicQueue = xQueueCreate(1, sizeof(uint16_t));
 80046d8:	2200      	movs	r2, #0
 80046da:	2102      	movs	r1, #2
 80046dc:	2001      	movs	r0, #1
 80046de:	f7fc fa8d 	bl	8000bfc <xQueueGenericCreate>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <queueSetup+0xc4>)
 80046e6:	601a      	str	r2, [r3, #0]
	if(xTaskAperiodicQueue == NULL) return 1;
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <queueSetup+0xc4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <queueSetup+0x98>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e006      	b.n	8004702 <queueSetup+0xa6>
	vQueueAddToRegistry(xTaskAperiodicQueue, "xTaskAperiodicQueue");
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <queueSetup+0xc4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	490a      	ldr	r1, [pc, #40]	; (8004724 <queueSetup+0xc8>)
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc feac 	bl	8001458 <vQueueAddToRegistry>

	return 0;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	2000f438 	.word	0x2000f438
 800470c:	08005160 	.word	0x08005160
 8004710:	2000f430 	.word	0x2000f430
 8004714:	0800516c 	.word	0x0800516c
 8004718:	2000f434 	.word	0x2000f434
 800471c:	08005178 	.word	0x08005178
 8004720:	2000f43c 	.word	0x2000f43c
 8004724:	08005184 	.word	0x08005184

08004728 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004728:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800472a:	e003      	b.n	8004734 <LoopCopyDataInit>

0800472c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800472e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004730:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004732:	3104      	adds	r1, #4

08004734 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004734:	480a      	ldr	r0, [pc, #40]	; (8004760 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004738:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800473a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800473c:	d3f6      	bcc.n	800472c <CopyDataInit>
  ldr  r2, =_sbss
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004740:	e002      	b.n	8004748 <LoopFillZerobss>

08004742 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004742:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004744:	f842 3b04 	str.w	r3, [r2], #4

08004748 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004748:	4b08      	ldr	r3, [pc, #32]	; (800476c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800474a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800474c:	d3f9      	bcc.n	8004742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800474e:	f000 f87d 	bl	800484c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004752:	f000 fb17 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004756:	f7ff ff2f 	bl	80045b8 <main>
  bx  lr    
 800475a:	4770      	bx	lr
  ldr  r3, =_sidata
 800475c:	080051bc 	.word	0x080051bc
  ldr  r0, =_sdata
 8004760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004764:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8004768:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800476c:	2000f50c 	.word	0x2000f50c

08004770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004770:	e7fe      	b.n	8004770 <ADC_IRQHandler>

08004772 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
}
 8004776:	bf00      	nop
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004784:	e7fe      	b.n	8004784 <HardFault_Handler+0x4>

08004786 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800478a:	e7fe      	b.n	800478a <MemManage_Handler+0x4>

0800478c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004790:	e7fe      	b.n	8004790 <BusFault_Handler+0x4>

08004792 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004796:	e7fe      	b.n	8004796 <UsageFault_Handler+0x4>

08004798 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80047b0:	4b13      	ldr	r3, [pc, #76]	; (8004800 <ITM_SendChar+0x58>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01a      	beq.n	80047f2 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80047bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80047c4:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d012      	beq.n	80047f2 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80047cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80047d4:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 80047dc:	bf00      	nop
 80047de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0fa      	beq.n	80047de <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 80047e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80047f2:	687b      	ldr	r3, [r7, #4]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	e000edf0 	.word	0xe000edf0

08004804 <_exit>:
	errno = ENOSYS;
	return -1;
}

void _exit(int32_t status)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 800480c:	e7fe      	b.n	800480c <_exit+0x8>

0800480e <_write>:
}

int _write(int file, char *ptr, int len)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e009      	b.n	8004838 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	60ba      	str	r2, [r7, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ffbb 	bl	80047a8 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3301      	adds	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	dbf1      	blt.n	8004824 <_write+0x16>
 return len;
 8004840:	687b      	ldr	r3, [r7, #4]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004850:	4a16      	ldr	r2, [pc, #88]	; (80048ac <SystemInit+0x60>)
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <SystemInit+0x60>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800485c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <SystemInit+0x64>)
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <SystemInit+0x64>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <SystemInit+0x64>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004872:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <SystemInit+0x64>)
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <SystemInit+0x64>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800487c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <SystemInit+0x64>)
 8004884:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <SystemInit+0x68>)
 8004886:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <SystemInit+0x64>)
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <SystemInit+0x64>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004892:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <SystemInit+0x64>)
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800489a:	f000 f80d 	bl	80048b8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800489e:	4b03      	ldr	r3, [pc, #12]	; (80048ac <SystemInit+0x60>)
 80048a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048a4:	609a      	str	r2, [r3, #8]
#endif
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	e000ed00 	.word	0xe000ed00
 80048b0:	40023800 	.word	0x40023800
 80048b4:	24003010 	.word	0x24003010

080048b8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	2300      	movs	r3, #0
 80048c4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80048c6:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <SetSysClock+0xe8>)
 80048c8:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <SetSysClock+0xe8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80048d2:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <SetSysClock+0xe8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3301      	adds	r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <SetSysClock+0x38>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048ee:	d1f0      	bne.n	80048d2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <SetSysClock+0xe8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80048fc:	2301      	movs	r3, #1
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	e001      	b.n	8004906 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d142      	bne.n	8004992 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800490c:	4a24      	ldr	r2, [pc, #144]	; (80049a0 <SetSysClock+0xe8>)
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <SetSysClock+0xe8>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004916:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004918:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <SetSysClock+0xec>)
 800491a:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <SetSysClock+0xec>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004922:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004924:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <SetSysClock+0xe8>)
 8004926:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <SetSysClock+0xe8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <SetSysClock+0xe8>)
 800492e:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <SetSysClock+0xe8>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004936:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004938:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <SetSysClock+0xe8>)
 800493a:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <SetSysClock+0xe8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004942:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004944:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <SetSysClock+0xe8>)
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <SetSysClock+0xf0>)
 8004948:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <SetSysClock+0xe8>)
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <SetSysClock+0xe8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004954:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004956:	bf00      	nop
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <SetSysClock+0xe8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f9      	beq.n	8004958 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <SetSysClock+0xf4>)
 8004966:	f240 6205 	movw	r2, #1541	; 0x605
 800496a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800496c:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <SetSysClock+0xe8>)
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <SetSysClock+0xe8>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004978:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <SetSysClock+0xe8>)
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <SetSysClock+0xe8>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f043 0302 	orr.w	r3, r3, #2
 8004982:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8004984:	bf00      	nop
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <SetSysClock+0xe8>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b08      	cmp	r3, #8
 8004990:	d1f9      	bne.n	8004986 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40007000 	.word	0x40007000
 80049a8:	07405408 	.word	0x07405408
 80049ac:	40023c00 	.word	0x40023c00

080049b0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	int div = 1;
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80049c0:	e004      	b.n	80049cc <ts_itoa+0x1c>
		div *= base;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d2f3      	bcs.n	80049c2 <ts_itoa+0x12>

	while (div != 0)
 80049da:	e029      	b.n	8004a30 <ts_itoa+0x80>
	{
		int num = d/div;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	613b      	str	r3, [r7, #16]
		d = d%div;
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80049ee:	fb02 f201 	mul.w	r2, r2, r1
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	60bb      	str	r3, [r7, #8]
		div /= base;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80049fe:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b09      	cmp	r3, #9
 8004a04:	dd0a      	ble.n	8004a1c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1c59      	adds	r1, r3, #1
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	6011      	str	r1, [r2, #0]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	3237      	adds	r2, #55	; 0x37
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e009      	b.n	8004a30 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	6011      	str	r1, [r2, #0]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	3230      	adds	r2, #48	; 0x30
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1d2      	bne.n	80049dc <ts_itoa+0x2c>
	}
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b088      	sub	sp, #32
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004a52:	e07d      	b.n	8004b50 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b25      	cmp	r3, #37	; 0x25
 8004a5a:	d171      	bne.n	8004b40 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d01e      	beq.n	8004aa8 <ts_formatstring+0x66>
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	dc06      	bgt.n	8004a7c <ts_formatstring+0x3a>
 8004a6e:	2b58      	cmp	r3, #88	; 0x58
 8004a70:	d050      	beq.n	8004b14 <ts_formatstring+0xd2>
 8004a72:	2b63      	cmp	r3, #99	; 0x63
 8004a74:	d00e      	beq.n	8004a94 <ts_formatstring+0x52>
 8004a76:	2b25      	cmp	r3, #37	; 0x25
 8004a78:	d058      	beq.n	8004b2c <ts_formatstring+0xea>
 8004a7a:	e05d      	b.n	8004b38 <ts_formatstring+0xf6>
 8004a7c:	2b73      	cmp	r3, #115	; 0x73
 8004a7e:	d02b      	beq.n	8004ad8 <ts_formatstring+0x96>
 8004a80:	2b73      	cmp	r3, #115	; 0x73
 8004a82:	dc02      	bgt.n	8004a8a <ts_formatstring+0x48>
 8004a84:	2b69      	cmp	r3, #105	; 0x69
 8004a86:	d00f      	beq.n	8004aa8 <ts_formatstring+0x66>
 8004a88:	e056      	b.n	8004b38 <ts_formatstring+0xf6>
 8004a8a:	2b75      	cmp	r3, #117	; 0x75
 8004a8c:	d037      	beq.n	8004afe <ts_formatstring+0xbc>
 8004a8e:	2b78      	cmp	r3, #120	; 0x78
 8004a90:	d040      	beq.n	8004b14 <ts_formatstring+0xd2>
 8004a92:	e051      	b.n	8004b38 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	60fa      	str	r2, [r7, #12]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	1d11      	adds	r1, r2, #4
 8004a9e:	6079      	str	r1, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
				break;
 8004aa6:	e047      	b.n	8004b38 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1d1a      	adds	r2, r3, #4
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da07      	bge.n	8004ac8 <ts_formatstring+0x86>
					{
						val *= -1;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	425b      	negs	r3, r3
 8004abc:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	60fa      	str	r2, [r7, #12]
 8004ac4:	222d      	movs	r2, #45	; 0x2d
 8004ac6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004ac8:	69f9      	ldr	r1, [r7, #28]
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	220a      	movs	r2, #10
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff6d 	bl	80049b0 <ts_itoa>
				}
				break;
 8004ad6:	e02f      	b.n	8004b38 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004ae2:	e007      	b.n	8004af4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	60fa      	str	r2, [r7, #12]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	1c51      	adds	r1, r2, #1
 8004aee:	61b9      	str	r1, [r7, #24]
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f3      	bne.n	8004ae4 <ts_formatstring+0xa2>
					}
				}
				break;
 8004afc:	e01c      	b.n	8004b38 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	f107 030c 	add.w	r3, r7, #12
 8004b0a:	220a      	movs	r2, #10
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff4f 	bl	80049b0 <ts_itoa>
				break;
 8004b12:	e011      	b.n	8004b38 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f107 030c 	add.w	r3, r7, #12
 8004b22:	2210      	movs	r2, #16
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff43 	bl	80049b0 <ts_itoa>
				break;
 8004b2a:	e005      	b.n	8004b38 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	60fa      	str	r2, [r7, #12]
 8004b32:	2225      	movs	r2, #37	; 0x25
 8004b34:	701a      	strb	r2, [r3, #0]
				  break;
 8004b36:	bf00      	nop
			}
			fmt++;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	e007      	b.n	8004b50 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	60fa      	str	r2, [r7, #12]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	1c51      	adds	r1, r2, #1
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f47f af7d 	bne.w	8004a54 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	461a      	mov	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad3      	subs	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004b7e:	e081      	b.n	8004c84 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b25      	cmp	r3, #37	; 0x25
 8004b86:	d177      	bne.n	8004c78 <ts_formatlength+0x108>
		{
			++fmt;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	3b58      	subs	r3, #88	; 0x58
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d86a      	bhi.n	8004c6e <ts_formatlength+0xfe>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <ts_formatlength+0x30>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004c61 	.word	0x08004c61
 8004ba4:	08004c6f 	.word	0x08004c6f
 8004ba8:	08004c6f 	.word	0x08004c6f
 8004bac:	08004c6f 	.word	0x08004c6f
 8004bb0:	08004c6f 	.word	0x08004c6f
 8004bb4:	08004c6f 	.word	0x08004c6f
 8004bb8:	08004c6f 	.word	0x08004c6f
 8004bbc:	08004c6f 	.word	0x08004c6f
 8004bc0:	08004c6f 	.word	0x08004c6f
 8004bc4:	08004c6f 	.word	0x08004c6f
 8004bc8:	08004c6f 	.word	0x08004c6f
 8004bcc:	08004c25 	.word	0x08004c25
 8004bd0:	08004c33 	.word	0x08004c33
 8004bd4:	08004c6f 	.word	0x08004c6f
 8004bd8:	08004c6f 	.word	0x08004c6f
 8004bdc:	08004c6f 	.word	0x08004c6f
 8004be0:	08004c6f 	.word	0x08004c6f
 8004be4:	08004c33 	.word	0x08004c33
 8004be8:	08004c6f 	.word	0x08004c6f
 8004bec:	08004c6f 	.word	0x08004c6f
 8004bf0:	08004c6f 	.word	0x08004c6f
 8004bf4:	08004c6f 	.word	0x08004c6f
 8004bf8:	08004c6f 	.word	0x08004c6f
 8004bfc:	08004c6f 	.word	0x08004c6f
 8004c00:	08004c6f 	.word	0x08004c6f
 8004c04:	08004c6f 	.word	0x08004c6f
 8004c08:	08004c6f 	.word	0x08004c6f
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c6f 	.word	0x08004c6f
 8004c14:	08004c33 	.word	0x08004c33
 8004c18:	08004c6f 	.word	0x08004c6f
 8004c1c:	08004c6f 	.word	0x08004c6f
 8004c20:	08004c61 	.word	0x08004c61
			{
			  case 'c':
		  		  va_arg(va, int);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	3304      	adds	r3, #4
 8004c28:	603b      	str	r3, [r7, #0]
				  ++length;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
				  break;
 8004c30:	e025      	b.n	8004c7e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	330b      	adds	r3, #11
 8004c36:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	603b      	str	r3, [r7, #0]
				  break;
 8004c3e:	e01e      	b.n	8004c7e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	603a      	str	r2, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004c4a:	e002      	b.n	8004c52 <ts_formatlength+0xe2>
			  			  ++length;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	60ba      	str	r2, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f6      	bne.n	8004c4c <ts_formatlength+0xdc>
			  	  }
				  break;
 8004c5e:	e00e      	b.n	8004c7e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3308      	adds	r3, #8
 8004c64:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	603b      	str	r3, [r7, #0]
				  break;
 8004c6c:	e007      	b.n	8004c7e <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
				  break;
 8004c74:	bf00      	nop
 8004c76:	e002      	b.n	8004c7e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3301      	adds	r3, #1
 8004c82:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f af79 	bne.w	8004b80 <ts_formatlength+0x10>
	}
	return length;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <sprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int sprintf(char *buf, const char *fmt, ...)
{
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8004ca6:	f107 0320 	add.w	r3, r7, #32
 8004caa:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	69f9      	ldr	r1, [r7, #28]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fec6 	bl	8004a42 <ts_formatstring>
 8004cb6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc4:	b003      	add	sp, #12
 8004cc6:	4770      	bx	lr

08004cc8 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8004cc8:	b40f      	push	{r0, r1, r2, r3}
 8004cca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
	int length = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8004cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cda:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ce0:	f7ff ff46 	bl	8004b70 <ts_formatlength>
 8004ce4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8004ce6:	466b      	mov	r3, sp
 8004ce8:	461e      	mov	r6, r3
		char buf[length];
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	1e4b      	subs	r3, r1, #1
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004cfc:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004d00:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004d04:	460b      	mov	r3, r1
 8004d06:	461a      	mov	r2, r3
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	00dd      	lsls	r5, r3, #3
 8004d0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d12:	00d4      	lsls	r4, r2, #3
 8004d14:	460b      	mov	r3, r1
 8004d16:	3307      	adds	r3, #7
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	ebad 0d03 	sub.w	sp, sp, r3
 8004d20:	466b      	mov	r3, sp
 8004d22:	3300      	adds	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004d26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d2a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fe85 	bl	8004a42 <ts_formatstring>
 8004d38:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	2001      	movs	r0, #1
 8004d42:	f7ff fd64 	bl	800480e <_write>
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d56:	b004      	add	sp, #16
 8004d58:	4770      	bx	lr
	...

08004d5c <exit>:
 8004d5c:	b508      	push	{r3, lr}
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <exit+0x20>)
 8004d60:	4604      	mov	r4, r0
 8004d62:	b113      	cbz	r3, 8004d6a <exit+0xe>
 8004d64:	2100      	movs	r1, #0
 8004d66:	f3af 8000 	nop.w
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <exit+0x24>)
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d70:	b103      	cbz	r3, 8004d74 <exit+0x18>
 8004d72:	4798      	blx	r3
 8004d74:	4620      	mov	r0, r4
 8004d76:	f7ff fd45 	bl	8004804 <_exit>
 8004d7a:	bf00      	nop
 8004d7c:	00000000 	.word	0x00000000
 8004d80:	08005198 	.word	0x08005198

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4e0d      	ldr	r6, [pc, #52]	; (8004dbc <__libc_init_array+0x38>)
 8004d88:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8a:	1ba4      	subs	r4, r4, r6
 8004d8c:	10a4      	asrs	r4, r4, #2
 8004d8e:	2500      	movs	r5, #0
 8004d90:	42a5      	cmp	r5, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	4e0b      	ldr	r6, [pc, #44]	; (8004dc4 <__libc_init_array+0x40>)
 8004d96:	4c0c      	ldr	r4, [pc, #48]	; (8004dc8 <__libc_init_array+0x44>)
 8004d98:	f000 fa00 	bl	800519c <_init>
 8004d9c:	1ba4      	subs	r4, r4, r6
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	2500      	movs	r5, #0
 8004da2:	42a5      	cmp	r5, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dac:	4798      	blx	r3
 8004dae:	3501      	adds	r5, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004db6:	4798      	blx	r3
 8004db8:	3501      	adds	r5, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	080051b4 	.word	0x080051b4
 8004dc0:	080051b4 	.word	0x080051b4
 8004dc4:	080051b4 	.word	0x080051b4
 8004dc8:	080051b8 	.word	0x080051b8

08004dcc <memcpy>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	1e43      	subs	r3, r0, #1
 8004dd0:	440a      	add	r2, r1
 8004dd2:	4291      	cmp	r1, r2
 8004dd4:	d100      	bne.n	8004dd8 <memcpy+0xc>
 8004dd6:	bd10      	pop	{r4, pc}
 8004dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de0:	e7f7      	b.n	8004dd2 <memcpy+0x6>

08004de2 <memset>:
 8004de2:	4402      	add	r2, r0
 8004de4:	4603      	mov	r3, r0
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d100      	bne.n	8004dec <memset+0xa>
 8004dea:	4770      	bx	lr
 8004dec:	f803 1b01 	strb.w	r1, [r3], #1
 8004df0:	e7f9      	b.n	8004de6 <memset+0x4>

08004df2 <strcat>:
 8004df2:	b510      	push	{r4, lr}
 8004df4:	4602      	mov	r2, r0
 8004df6:	4613      	mov	r3, r2
 8004df8:	3201      	adds	r2, #1
 8004dfa:	781c      	ldrb	r4, [r3, #0]
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	d1fa      	bne.n	8004df6 <strcat+0x4>
 8004e00:	3b01      	subs	r3, #1
 8004e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e0a:	2a00      	cmp	r2, #0
 8004e0c:	d1f9      	bne.n	8004e02 <strcat+0x10>
 8004e0e:	bd10      	pop	{r4, pc}
 8004e10:	454c4449 	.word	0x454c4449
 8004e14:	00000000 	.word	0x00000000
 8004e18:	20726d54 	.word	0x20726d54
 8004e1c:	00637653 	.word	0x00637653
 8004e20:	51726d54 	.word	0x51726d54
 8004e24:	00000000 	.word	0x00000000
 8004e28:	72657041 	.word	0x72657041
 8004e2c:	69646f69 	.word	0x69646f69
 8004e30:	61542063 	.word	0x61542063
 8004e34:	00006b73 	.word	0x00006b73
 8004e38:	6570410a 	.word	0x6570410a
 8004e3c:	646f6972 	.word	0x646f6972
 8004e40:	54206369 	.word	0x54206369
 8004e44:	206b7361 	.word	0x206b7361
 8004e48:	656c6572 	.word	0x656c6572
 8004e4c:	64657361 	.word	0x64657361
 8004e50:	20746120 	.word	0x20746120
 8004e54:	6d207525 	.word	0x6d207525
 8004e58:	69772073 	.word	0x69772073
 8004e5c:	70206874 	.word	0x70206874
 8004e60:	726f6972 	.word	0x726f6972
 8004e64:	20797469 	.word	0x20797469
 8004e68:	000a7525 	.word	0x000a7525
 8004e6c:	6570410a 	.word	0x6570410a
 8004e70:	646f6972 	.word	0x646f6972
 8004e74:	74206369 	.word	0x74206369
 8004e78:	206b7361 	.word	0x206b7361
 8004e7c:	706d6f63 	.word	0x706d6f63
 8004e80:	6574656c 	.word	0x6574656c
 8004e84:	74612064 	.word	0x74612064
 8004e88:	20752520 	.word	0x20752520
 8004e8c:	0000736d 	.word	0x0000736d
 8004e90:	6570410a 	.word	0x6570410a
 8004e94:	646f6972 	.word	0x646f6972
 8004e98:	74206369 	.word	0x74206369
 8004e9c:	206b7361 	.word	0x206b7361
 8004ea0:	7265766f 	.word	0x7265766f
 8004ea4:	20657564 	.word	0x20657564
 8004ea8:	25207461 	.word	0x25207461
 8004eac:	736d2075 	.word	0x736d2075
 8004eb0:	00000000 	.word	0x00000000
 8004eb4:	69726550 	.word	0x69726550
 8004eb8:	6369646f 	.word	0x6369646f
 8004ebc:	73615420 	.word	0x73615420
 8004ec0:	0031206b 	.word	0x0031206b
 8004ec4:	69726550 	.word	0x69726550
 8004ec8:	6369646f 	.word	0x6369646f
 8004ecc:	73615420 	.word	0x73615420
 8004ed0:	0032206b 	.word	0x0032206b
 8004ed4:	69726550 	.word	0x69726550
 8004ed8:	6369646f 	.word	0x6369646f
 8004edc:	73615420 	.word	0x73615420
 8004ee0:	0033206b 	.word	0x0033206b
 8004ee4:	7265500a 	.word	0x7265500a
 8004ee8:	69646f69 	.word	0x69646f69
 8004eec:	61542063 	.word	0x61542063
 8004ef0:	31206b73 	.word	0x31206b73
 8004ef4:	6c657220 	.word	0x6c657220
 8004ef8:	65736165 	.word	0x65736165
 8004efc:	74612064 	.word	0x74612064
 8004f00:	20752520 	.word	0x20752520
 8004f04:	7720736d 	.word	0x7720736d
 8004f08:	20687469 	.word	0x20687469
 8004f0c:	6f697270 	.word	0x6f697270
 8004f10:	79746972 	.word	0x79746972
 8004f14:	00752520 	.word	0x00752520
 8004f18:	7265500a 	.word	0x7265500a
 8004f1c:	69646f69 	.word	0x69646f69
 8004f20:	61542063 	.word	0x61542063
 8004f24:	31206b73 	.word	0x31206b73
 8004f28:	6d6f6320 	.word	0x6d6f6320
 8004f2c:	74656c70 	.word	0x74656c70
 8004f30:	61206465 	.word	0x61206465
 8004f34:	75252074 	.word	0x75252074
 8004f38:	00736d20 	.word	0x00736d20
 8004f3c:	7265500a 	.word	0x7265500a
 8004f40:	69646f69 	.word	0x69646f69
 8004f44:	61542063 	.word	0x61542063
 8004f48:	31206b73 	.word	0x31206b73
 8004f4c:	65766f20 	.word	0x65766f20
 8004f50:	65756472 	.word	0x65756472
 8004f54:	20746120 	.word	0x20746120
 8004f58:	6d207525 	.word	0x6d207525
 8004f5c:	00000073 	.word	0x00000073
 8004f60:	7265500a 	.word	0x7265500a
 8004f64:	69646f69 	.word	0x69646f69
 8004f68:	61542063 	.word	0x61542063
 8004f6c:	32206b73 	.word	0x32206b73
 8004f70:	6c657220 	.word	0x6c657220
 8004f74:	65736165 	.word	0x65736165
 8004f78:	74612064 	.word	0x74612064
 8004f7c:	20752520 	.word	0x20752520
 8004f80:	7720736d 	.word	0x7720736d
 8004f84:	20687469 	.word	0x20687469
 8004f88:	6f697270 	.word	0x6f697270
 8004f8c:	79746972 	.word	0x79746972
 8004f90:	00752520 	.word	0x00752520
 8004f94:	7265500a 	.word	0x7265500a
 8004f98:	69646f69 	.word	0x69646f69
 8004f9c:	61542063 	.word	0x61542063
 8004fa0:	32206b73 	.word	0x32206b73
 8004fa4:	6d6f6320 	.word	0x6d6f6320
 8004fa8:	74656c70 	.word	0x74656c70
 8004fac:	61206465 	.word	0x61206465
 8004fb0:	75252074 	.word	0x75252074
 8004fb4:	00736d20 	.word	0x00736d20
 8004fb8:	7265500a 	.word	0x7265500a
 8004fbc:	69646f69 	.word	0x69646f69
 8004fc0:	61542063 	.word	0x61542063
 8004fc4:	32206b73 	.word	0x32206b73
 8004fc8:	65766f20 	.word	0x65766f20
 8004fcc:	65756472 	.word	0x65756472
 8004fd0:	20746120 	.word	0x20746120
 8004fd4:	6d207525 	.word	0x6d207525
 8004fd8:	00000073 	.word	0x00000073
 8004fdc:	7265500a 	.word	0x7265500a
 8004fe0:	69646f69 	.word	0x69646f69
 8004fe4:	61542063 	.word	0x61542063
 8004fe8:	33206b73 	.word	0x33206b73
 8004fec:	6c657220 	.word	0x6c657220
 8004ff0:	65736165 	.word	0x65736165
 8004ff4:	74612064 	.word	0x74612064
 8004ff8:	20752520 	.word	0x20752520
 8004ffc:	7720736d 	.word	0x7720736d
 8005000:	20687469 	.word	0x20687469
 8005004:	6f697270 	.word	0x6f697270
 8005008:	79746972 	.word	0x79746972
 800500c:	00752520 	.word	0x00752520
 8005010:	7265500a 	.word	0x7265500a
 8005014:	69646f69 	.word	0x69646f69
 8005018:	61542063 	.word	0x61542063
 800501c:	33206b73 	.word	0x33206b73
 8005020:	6d6f6320 	.word	0x6d6f6320
 8005024:	74656c70 	.word	0x74656c70
 8005028:	61206465 	.word	0x61206465
 800502c:	75252074 	.word	0x75252074
 8005030:	00736d20 	.word	0x00736d20
 8005034:	7265500a 	.word	0x7265500a
 8005038:	69646f69 	.word	0x69646f69
 800503c:	61542063 	.word	0x61542063
 8005040:	33206b73 	.word	0x33206b73
 8005044:	65766f20 	.word	0x65766f20
 8005048:	65756472 	.word	0x65756472
 800504c:	20746120 	.word	0x20746120
 8005050:	6d207525 	.word	0x6d207525
 8005054:	00000073 	.word	0x00000073
 8005058:	00000000 	.word	0x00000000
 800505c:	6b736154 	.word	0x6b736154
 8005060:	7325203a 	.word	0x7325203a
 8005064:	74697720 	.word	0x74697720
 8005068:	65642068 	.word	0x65642068
 800506c:	696c6461 	.word	0x696c6461
 8005070:	203a656e 	.word	0x203a656e
 8005074:	0a207525 	.word	0x0a207525
 8005078:	00000000 	.word	0x00000000
 800507c:	68746f4e 	.word	0x68746f4e
 8005080:	20676e69 	.word	0x20676e69
 8005084:	6c206e69 	.word	0x6c206e69
 8005088:	2e747369 	.word	0x2e747369
	...
 8005094:	65686353 	.word	0x65686353
 8005098:	656c7564 	.word	0x656c7564
 800509c:	75512072 	.word	0x75512072
 80050a0:	00657565 	.word	0x00657565
 80050a4:	696e6f4d 	.word	0x696e6f4d
 80050a8:	20726f74 	.word	0x20726f74
 80050ac:	75657551 	.word	0x75657551
 80050b0:	00000065 	.word	0x00000065
 80050b4:	53204444 	.word	0x53204444
 80050b8:	64656863 	.word	0x64656863
 80050bc:	72656c75 	.word	0x72656c75
 80050c0:	73615420 	.word	0x73615420
 80050c4:	0000006b 	.word	0x0000006b
 80050c8:	696e6f4d 	.word	0x696e6f4d
 80050cc:	20726f74 	.word	0x20726f74
 80050d0:	6b736154 	.word	0x6b736154
 80050d4:	00000000 	.word	0x00000000
 80050d8:	63410a0a 	.word	0x63410a0a
 80050dc:	65766974 	.word	0x65766974
 80050e0:	73615420 	.word	0x73615420
 80050e4:	6120736b 	.word	0x6120736b
 80050e8:	75252074 	.word	0x75252074
 80050ec:	250a203a 	.word	0x250a203a
 80050f0:	00000a73 	.word	0x00000a73
 80050f4:	7265764f 	.word	0x7265764f
 80050f8:	20657564 	.word	0x20657564
 80050fc:	6b736154 	.word	0x6b736154
 8005100:	74612073 	.word	0x74612073
 8005104:	3a752520 	.word	0x3a752520
 8005108:	73250a20 	.word	0x73250a20
 800510c:	0000000a 	.word	0x0000000a
 8005110:	69726550 	.word	0x69726550
 8005114:	6369646f 	.word	0x6369646f
 8005118:	61657243 	.word	0x61657243
 800511c:	31726f74 	.word	0x31726f74
 8005120:	00000000 	.word	0x00000000
 8005124:	69726550 	.word	0x69726550
 8005128:	6369646f 	.word	0x6369646f
 800512c:	61657243 	.word	0x61657243
 8005130:	32726f74 	.word	0x32726f74
 8005134:	00000000 	.word	0x00000000
 8005138:	69726550 	.word	0x69726550
 800513c:	6369646f 	.word	0x6369646f
 8005140:	61657243 	.word	0x61657243
 8005144:	33726f74 	.word	0x33726f74
 8005148:	00000000 	.word	0x00000000
 800514c:	72657041 	.word	0x72657041
 8005150:	69646f69 	.word	0x69646f69
 8005154:	65724363 	.word	0x65724363
 8005158:	726f7461 	.word	0x726f7461
 800515c:	00000000 	.word	0x00000000
 8005160:	73615478 	.word	0x73615478
 8005164:	7551316b 	.word	0x7551316b
 8005168:	00657565 	.word	0x00657565
 800516c:	73615478 	.word	0x73615478
 8005170:	7551326b 	.word	0x7551326b
 8005174:	00657565 	.word	0x00657565
 8005178:	73615478 	.word	0x73615478
 800517c:	7551336b 	.word	0x7551336b
 8005180:	00657565 	.word	0x00657565
 8005184:	73615478 	.word	0x73615478
 8005188:	6570416b 	.word	0x6570416b
 800518c:	646f6972 	.word	0x646f6972
 8005190:	75516369 	.word	0x75516369
 8005194:	00657565 	.word	0x00657565

08005198 <_global_impure_ptr>:
 8005198:	20000018                                ... 

0800519c <_init>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr

080051a8 <_fini>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr
